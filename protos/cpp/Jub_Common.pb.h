// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_Common.proto

#ifndef PROTOBUF_Jub_5fCommon_2eproto__INCLUDED
#define PROTOBUF_Jub_5fCommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Jub_5fCommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBip32PathImpl();
void InitDefaultsBip32Path();
void InitDefaultsDeviceInfoImpl();
void InitDefaultsDeviceInfo();
void InitDefaultsResultIntImpl();
void InitDefaultsResultInt();
void InitDefaultsResultStringImpl();
void InitDefaultsResultString();
inline void InitDefaults() {
  InitDefaultsBip32Path();
  InitDefaultsDeviceInfo();
  InitDefaultsResultInt();
  InitDefaultsResultString();
}
}  // namespace protobuf_Jub_5fCommon_2eproto
namespace JUB {
namespace Proto {
namespace Common {
class Bip32Path;
class Bip32PathDefaultTypeInternal;
extern Bip32PathDefaultTypeInternal _Bip32Path_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class ResultInt;
class ResultIntDefaultTypeInternal;
extern ResultIntDefaultTypeInternal _ResultInt_default_instance_;
class ResultString;
class ResultStringDefaultTypeInternal;
extern ResultStringDefaultTypeInternal _ResultString_default_instance_;
}  // namespace Common
}  // namespace Proto
}  // namespace JUB
namespace JUB {
namespace Proto {
namespace Common {

enum ENUM_COINTYPE_BTC {
  COINBTC = 0,
  COINBCH = 1,
  COINLTC = 2,
  COINUSDT = 3,
  COINDASH = 4,
  COINQTUM = 5,
  ENUM_COINTYPE_BTC_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ENUM_COINTYPE_BTC_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ENUM_COINTYPE_BTC_IsValid(int value);
const ENUM_COINTYPE_BTC ENUM_COINTYPE_BTC_MIN = COINBTC;
const ENUM_COINTYPE_BTC ENUM_COINTYPE_BTC_MAX = COINQTUM;
const int ENUM_COINTYPE_BTC_ARRAYSIZE = ENUM_COINTYPE_BTC_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENUM_COINTYPE_BTC_descriptor();
inline const ::std::string& ENUM_COINTYPE_BTC_Name(ENUM_COINTYPE_BTC value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENUM_COINTYPE_BTC_descriptor(), value);
}
inline bool ENUM_COINTYPE_BTC_Parse(
    const ::std::string& name, ENUM_COINTYPE_BTC* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENUM_COINTYPE_BTC>(
    ENUM_COINTYPE_BTC_descriptor(), name, value);
}
enum ENUM_MNEMONIC_STRENGTH {
  STRENGTH128 = 0,
  STRENGTH192 = 1,
  STRENGTH256 = 2,
  ENUM_MNEMONIC_STRENGTH_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ENUM_MNEMONIC_STRENGTH_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ENUM_MNEMONIC_STRENGTH_IsValid(int value);
const ENUM_MNEMONIC_STRENGTH ENUM_MNEMONIC_STRENGTH_MIN = STRENGTH128;
const ENUM_MNEMONIC_STRENGTH ENUM_MNEMONIC_STRENGTH_MAX = STRENGTH256;
const int ENUM_MNEMONIC_STRENGTH_ARRAYSIZE = ENUM_MNEMONIC_STRENGTH_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENUM_MNEMONIC_STRENGTH_descriptor();
inline const ::std::string& ENUM_MNEMONIC_STRENGTH_Name(ENUM_MNEMONIC_STRENGTH value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENUM_MNEMONIC_STRENGTH_descriptor(), value);
}
inline bool ENUM_MNEMONIC_STRENGTH_Parse(
    const ::std::string& name, ENUM_MNEMONIC_STRENGTH* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENUM_MNEMONIC_STRENGTH>(
    ENUM_MNEMONIC_STRENGTH_descriptor(), name, value);
}
enum CURVES {
  secp256k1 = 0,
  ed25519 = 1,
  nist256p1 = 2,
  CURVES_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CURVES_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CURVES_IsValid(int value);
const CURVES CURVES_MIN = secp256k1;
const CURVES CURVES_MAX = nist256p1;
const int CURVES_ARRAYSIZE = CURVES_MAX + 1;

const ::google::protobuf::EnumDescriptor* CURVES_descriptor();
inline const ::std::string& CURVES_Name(CURVES value) {
  return ::google::protobuf::internal::NameOfEnum(
    CURVES_descriptor(), value);
}
inline bool CURVES_Parse(
    const ::std::string& name, CURVES* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CURVES>(
    CURVES_descriptor(), name, value);
}
// ===================================================================

class Bip32Path : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.Bip32Path) */ {
 public:
  Bip32Path();
  virtual ~Bip32Path();

  Bip32Path(const Bip32Path& from);

  inline Bip32Path& operator=(const Bip32Path& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bip32Path(Bip32Path&& from) noexcept
    : Bip32Path() {
    *this = ::std::move(from);
  }

  inline Bip32Path& operator=(Bip32Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bip32Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bip32Path* internal_default_instance() {
    return reinterpret_cast<const Bip32Path*>(
               &_Bip32Path_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Bip32Path* other);
  friend void swap(Bip32Path& a, Bip32Path& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bip32Path* New() const PROTOBUF_FINAL { return New(NULL); }

  Bip32Path* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bip32Path& from);
  void MergeFrom(const Bip32Path& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bip32Path* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 addressIndex = 2;
  void clear_addressindex();
  static const int kAddressIndexFieldNumber = 2;
  ::google::protobuf::uint64 addressindex() const;
  void set_addressindex(::google::protobuf::uint64 value);

  // bool change = 1;
  void clear_change();
  static const int kChangeFieldNumber = 1;
  bool change() const;
  void set_change(bool value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.Bip32Path)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 addressindex_;
  bool change_;
  mutable int _cached_size_;
  friend struct ::protobuf_Jub_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Jub_5fCommon_2eproto::InitDefaultsBip32PathImpl();
};
// -------------------------------------------------------------------

class DeviceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DeviceInfo* other);
  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sn = 1;
  void clear_sn();
  static const int kSnFieldNumber = 1;
  const ::std::string& sn() const;
  void set_sn(const ::std::string& value);
  #if LANG_CXX11
  void set_sn(::std::string&& value);
  #endif
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  ::std::string* mutable_sn();
  ::std::string* release_sn();
  void set_allocated_sn(::std::string* sn);

  // string label = 2;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string bleVersion = 3;
  void clear_bleversion();
  static const int kBleVersionFieldNumber = 3;
  const ::std::string& bleversion() const;
  void set_bleversion(const ::std::string& value);
  #if LANG_CXX11
  void set_bleversion(::std::string&& value);
  #endif
  void set_bleversion(const char* value);
  void set_bleversion(const char* value, size_t size);
  ::std::string* mutable_bleversion();
  ::std::string* release_bleversion();
  void set_allocated_bleversion(::std::string* bleversion);

  // string firmwareVersion = 4;
  void clear_firmwareversion();
  static const int kFirmwareVersionFieldNumber = 4;
  const ::std::string& firmwareversion() const;
  void set_firmwareversion(const ::std::string& value);
  #if LANG_CXX11
  void set_firmwareversion(::std::string&& value);
  #endif
  void set_firmwareversion(const char* value);
  void set_firmwareversion(const char* value, size_t size);
  ::std::string* mutable_firmwareversion();
  ::std::string* release_firmwareversion();
  void set_allocated_firmwareversion(::std::string* firmwareversion);

  // uint32 pinRetry = 5;
  void clear_pinretry();
  static const int kPinRetryFieldNumber = 5;
  ::google::protobuf::uint32 pinretry() const;
  void set_pinretry(::google::protobuf::uint32 value);

  // uint32 pinMaxRetry = 6;
  void clear_pinmaxretry();
  static const int kPinMaxRetryFieldNumber = 6;
  ::google::protobuf::uint32 pinmaxretry() const;
  void set_pinmaxretry(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.DeviceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sn_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr bleversion_;
  ::google::protobuf::internal::ArenaStringPtr firmwareversion_;
  ::google::protobuf::uint32 pinretry_;
  ::google::protobuf::uint32 pinmaxretry_;
  mutable int _cached_size_;
  friend struct ::protobuf_Jub_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Jub_5fCommon_2eproto::InitDefaultsDeviceInfoImpl();
};
// -------------------------------------------------------------------

class ResultInt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.ResultInt) */ {
 public:
  ResultInt();
  virtual ~ResultInt();

  ResultInt(const ResultInt& from);

  inline ResultInt& operator=(const ResultInt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResultInt(ResultInt&& from) noexcept
    : ResultInt() {
    *this = ::std::move(from);
  }

  inline ResultInt& operator=(ResultInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultInt* internal_default_instance() {
    return reinterpret_cast<const ResultInt*>(
               &_ResultInt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ResultInt* other);
  friend void swap(ResultInt& a, ResultInt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResultInt* New() const PROTOBUF_FINAL { return New(NULL); }

  ResultInt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResultInt& from);
  void MergeFrom(const ResultInt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResultInt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 rv = 1;
  void clear_rv();
  static const int kRvFieldNumber = 1;
  ::google::protobuf::uint64 rv() const;
  void set_rv(::google::protobuf::uint64 value);

  // uint32 res = 2;
  void clear_res();
  static const int kResFieldNumber = 2;
  ::google::protobuf::uint32 res() const;
  void set_res(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.ResultInt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 rv_;
  ::google::protobuf::uint32 res_;
  mutable int _cached_size_;
  friend struct ::protobuf_Jub_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Jub_5fCommon_2eproto::InitDefaultsResultIntImpl();
};
// -------------------------------------------------------------------

class ResultString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.ResultString) */ {
 public:
  ResultString();
  virtual ~ResultString();

  ResultString(const ResultString& from);

  inline ResultString& operator=(const ResultString& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResultString(ResultString&& from) noexcept
    : ResultString() {
    *this = ::std::move(from);
  }

  inline ResultString& operator=(ResultString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultString* internal_default_instance() {
    return reinterpret_cast<const ResultString*>(
               &_ResultString_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ResultString* other);
  friend void swap(ResultString& a, ResultString& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResultString* New() const PROTOBUF_FINAL { return New(NULL); }

  ResultString* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResultString& from);
  void MergeFrom(const ResultString& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResultString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string res = 2;
  void clear_res();
  static const int kResFieldNumber = 2;
  const ::std::string& res() const;
  void set_res(const ::std::string& value);
  #if LANG_CXX11
  void set_res(::std::string&& value);
  #endif
  void set_res(const char* value);
  void set_res(const char* value, size_t size);
  ::std::string* mutable_res();
  ::std::string* release_res();
  void set_allocated_res(::std::string* res);

  // uint64 rv = 1;
  void clear_rv();
  static const int kRvFieldNumber = 1;
  ::google::protobuf::uint64 rv() const;
  void set_rv(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.ResultString)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr res_;
  ::google::protobuf::uint64 rv_;
  mutable int _cached_size_;
  friend struct ::protobuf_Jub_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Jub_5fCommon_2eproto::InitDefaultsResultStringImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Bip32Path

// bool change = 1;
inline void Bip32Path::clear_change() {
  change_ = false;
}
inline bool Bip32Path::change() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.Bip32Path.change)
  return change_;
}
inline void Bip32Path::set_change(bool value) {
  
  change_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.Bip32Path.change)
}

// uint64 addressIndex = 2;
inline void Bip32Path::clear_addressindex() {
  addressindex_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Bip32Path::addressindex() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.Bip32Path.addressIndex)
  return addressindex_;
}
inline void Bip32Path::set_addressindex(::google::protobuf::uint64 value) {
  
  addressindex_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.Bip32Path.addressIndex)
}

// -------------------------------------------------------------------

// DeviceInfo

// string sn = 1;
inline void DeviceInfo::clear_sn() {
  sn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::sn() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.sn)
  return sn_.GetNoArena();
}
inline void DeviceInfo::set_sn(const ::std::string& value) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.sn)
}
#if LANG_CXX11
inline void DeviceInfo::set_sn(::std::string&& value) {
  
  sn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.DeviceInfo.sn)
}
#endif
inline void DeviceInfo::set_sn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.DeviceInfo.sn)
}
inline void DeviceInfo::set_sn(const char* value, size_t size) {
  
  sn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.DeviceInfo.sn)
}
inline ::std::string* DeviceInfo::mutable_sn() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.DeviceInfo.sn)
  return sn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_sn() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.DeviceInfo.sn)
  
  return sn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_sn(::std::string* sn) {
  if (sn != NULL) {
    
  } else {
    
  }
  sn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.DeviceInfo.sn)
}

// string label = 2;
inline void DeviceInfo::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::label() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.label)
  return label_.GetNoArena();
}
inline void DeviceInfo::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.label)
}
#if LANG_CXX11
inline void DeviceInfo::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.DeviceInfo.label)
}
#endif
inline void DeviceInfo::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.DeviceInfo.label)
}
inline void DeviceInfo::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.DeviceInfo.label)
}
inline ::std::string* DeviceInfo::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.DeviceInfo.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_label() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.DeviceInfo.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.DeviceInfo.label)
}

// string bleVersion = 3;
inline void DeviceInfo::clear_bleversion() {
  bleversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::bleversion() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.bleVersion)
  return bleversion_.GetNoArena();
}
inline void DeviceInfo::set_bleversion(const ::std::string& value) {
  
  bleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.bleVersion)
}
#if LANG_CXX11
inline void DeviceInfo::set_bleversion(::std::string&& value) {
  
  bleversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.DeviceInfo.bleVersion)
}
#endif
inline void DeviceInfo::set_bleversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.DeviceInfo.bleVersion)
}
inline void DeviceInfo::set_bleversion(const char* value, size_t size) {
  
  bleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.DeviceInfo.bleVersion)
}
inline ::std::string* DeviceInfo::mutable_bleversion() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.DeviceInfo.bleVersion)
  return bleversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_bleversion() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.DeviceInfo.bleVersion)
  
  return bleversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_bleversion(::std::string* bleversion) {
  if (bleversion != NULL) {
    
  } else {
    
  }
  bleversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bleversion);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.DeviceInfo.bleVersion)
}

// string firmwareVersion = 4;
inline void DeviceInfo::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::firmwareversion() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.firmwareVersion)
  return firmwareversion_.GetNoArena();
}
inline void DeviceInfo::set_firmwareversion(const ::std::string& value) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.firmwareVersion)
}
#if LANG_CXX11
inline void DeviceInfo::set_firmwareversion(::std::string&& value) {
  
  firmwareversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.DeviceInfo.firmwareVersion)
}
#endif
inline void DeviceInfo::set_firmwareversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.DeviceInfo.firmwareVersion)
}
inline void DeviceInfo::set_firmwareversion(const char* value, size_t size) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.DeviceInfo.firmwareVersion)
}
inline ::std::string* DeviceInfo::mutable_firmwareversion() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.DeviceInfo.firmwareVersion)
  return firmwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.DeviceInfo.firmwareVersion)
  
  return firmwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_firmwareversion(::std::string* firmwareversion) {
  if (firmwareversion != NULL) {
    
  } else {
    
  }
  firmwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.DeviceInfo.firmwareVersion)
}

// uint32 pinRetry = 5;
inline void DeviceInfo::clear_pinretry() {
  pinretry_ = 0u;
}
inline ::google::protobuf::uint32 DeviceInfo::pinretry() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.pinRetry)
  return pinretry_;
}
inline void DeviceInfo::set_pinretry(::google::protobuf::uint32 value) {
  
  pinretry_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.pinRetry)
}

// uint32 pinMaxRetry = 6;
inline void DeviceInfo::clear_pinmaxretry() {
  pinmaxretry_ = 0u;
}
inline ::google::protobuf::uint32 DeviceInfo::pinmaxretry() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.pinMaxRetry)
  return pinmaxretry_;
}
inline void DeviceInfo::set_pinmaxretry(::google::protobuf::uint32 value) {
  
  pinmaxretry_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.pinMaxRetry)
}

// -------------------------------------------------------------------

// ResultInt

// uint64 rv = 1;
inline void ResultInt::clear_rv() {
  rv_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResultInt::rv() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultInt.rv)
  return rv_;
}
inline void ResultInt::set_rv(::google::protobuf::uint64 value) {
  
  rv_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultInt.rv)
}

// uint32 res = 2;
inline void ResultInt::clear_res() {
  res_ = 0u;
}
inline ::google::protobuf::uint32 ResultInt::res() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultInt.res)
  return res_;
}
inline void ResultInt::set_res(::google::protobuf::uint32 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultInt.res)
}

// -------------------------------------------------------------------

// ResultString

// uint64 rv = 1;
inline void ResultString::clear_rv() {
  rv_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResultString::rv() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultString.rv)
  return rv_;
}
inline void ResultString::set_rv(::google::protobuf::uint64 value) {
  
  rv_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultString.rv)
}

// string res = 2;
inline void ResultString::clear_res() {
  res_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResultString::res() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultString.res)
  return res_.GetNoArena();
}
inline void ResultString::set_res(const ::std::string& value) {
  
  res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultString.res)
}
#if LANG_CXX11
inline void ResultString::set_res(::std::string&& value) {
  
  res_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.ResultString.res)
}
#endif
inline void ResultString::set_res(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.ResultString.res)
}
inline void ResultString::set_res(const char* value, size_t size) {
  
  res_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.ResultString.res)
}
inline ::std::string* ResultString::mutable_res() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.ResultString.res)
  return res_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResultString::release_res() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.ResultString.res)
  
  return res_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResultString::set_allocated_res(::std::string* res) {
  if (res != NULL) {
    
  } else {
    
  }
  res_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), res);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.ResultString.res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common
}  // namespace Proto
}  // namespace JUB

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::JUB::Proto::Common::ENUM_COINTYPE_BTC> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::ENUM_COINTYPE_BTC>() {
  return ::JUB::Proto::Common::ENUM_COINTYPE_BTC_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Common::ENUM_MNEMONIC_STRENGTH> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::ENUM_MNEMONIC_STRENGTH>() {
  return ::JUB::Proto::Common::ENUM_MNEMONIC_STRENGTH_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Common::CURVES> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::CURVES>() {
  return ::JUB::Proto::Common::CURVES_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Jub_5fCommon_2eproto__INCLUDED
