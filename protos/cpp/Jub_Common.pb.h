// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_Common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Jub_5fCommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Jub_5fCommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Jub_5fCommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Jub_5fCommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Jub_5fCommon_2eproto;
namespace JUB {
namespace Proto {
namespace Common {
class Bip32Path;
class Bip32PathDefaultTypeInternal;
extern Bip32PathDefaultTypeInternal _Bip32Path_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class ResultInt;
class ResultIntDefaultTypeInternal;
extern ResultIntDefaultTypeInternal _ResultInt_default_instance_;
class ResultString;
class ResultStringDefaultTypeInternal;
extern ResultStringDefaultTypeInternal _ResultString_default_instance_;
}  // namespace Common
}  // namespace Proto
}  // namespace JUB
PROTOBUF_NAMESPACE_OPEN
template<> ::JUB::Proto::Common::Bip32Path* Arena::CreateMaybeMessage<::JUB::Proto::Common::Bip32Path>(Arena*);
template<> ::JUB::Proto::Common::DeviceInfo* Arena::CreateMaybeMessage<::JUB::Proto::Common::DeviceInfo>(Arena*);
template<> ::JUB::Proto::Common::ResultInt* Arena::CreateMaybeMessage<::JUB::Proto::Common::ResultInt>(Arena*);
template<> ::JUB::Proto::Common::ResultString* Arena::CreateMaybeMessage<::JUB::Proto::Common::ResultString>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JUB {
namespace Proto {
namespace Common {

enum ENUM_COINTYPE_BTC : int {
  COINBTC = 0,
  COINBCH = 1,
  COINLTC = 2,
  COINUSDT = 3,
  COINDASH = 4,
  COINQTUM = 5,
  ENUM_COINTYPE_BTC_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_COINTYPE_BTC_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_COINTYPE_BTC_IsValid(int value);
constexpr ENUM_COINTYPE_BTC ENUM_COINTYPE_BTC_MIN = COINBTC;
constexpr ENUM_COINTYPE_BTC ENUM_COINTYPE_BTC_MAX = COINQTUM;
constexpr int ENUM_COINTYPE_BTC_ARRAYSIZE = ENUM_COINTYPE_BTC_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_COINTYPE_BTC_descriptor();
template<typename T>
inline const std::string& ENUM_COINTYPE_BTC_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_COINTYPE_BTC>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_COINTYPE_BTC_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_COINTYPE_BTC_descriptor(), enum_t_value);
}
inline bool ENUM_COINTYPE_BTC_Parse(
    const std::string& name, ENUM_COINTYPE_BTC* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_COINTYPE_BTC>(
    ENUM_COINTYPE_BTC_descriptor(), name, value);
}
enum ENUM_MNEMONIC_STRENGTH : int {
  STRENGTH128 = 0,
  STRENGTH192 = 1,
  STRENGTH256 = 2,
  ENUM_MNEMONIC_STRENGTH_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_MNEMONIC_STRENGTH_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_MNEMONIC_STRENGTH_IsValid(int value);
constexpr ENUM_MNEMONIC_STRENGTH ENUM_MNEMONIC_STRENGTH_MIN = STRENGTH128;
constexpr ENUM_MNEMONIC_STRENGTH ENUM_MNEMONIC_STRENGTH_MAX = STRENGTH256;
constexpr int ENUM_MNEMONIC_STRENGTH_ARRAYSIZE = ENUM_MNEMONIC_STRENGTH_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_MNEMONIC_STRENGTH_descriptor();
template<typename T>
inline const std::string& ENUM_MNEMONIC_STRENGTH_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_MNEMONIC_STRENGTH>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_MNEMONIC_STRENGTH_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_MNEMONIC_STRENGTH_descriptor(), enum_t_value);
}
inline bool ENUM_MNEMONIC_STRENGTH_Parse(
    const std::string& name, ENUM_MNEMONIC_STRENGTH* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_MNEMONIC_STRENGTH>(
    ENUM_MNEMONIC_STRENGTH_descriptor(), name, value);
}
enum CURVES : int {
  secp256k1 = 0,
  ed25519 = 1,
  nist256p1 = 2,
  CURVES_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CURVES_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CURVES_IsValid(int value);
constexpr CURVES CURVES_MIN = secp256k1;
constexpr CURVES CURVES_MAX = nist256p1;
constexpr int CURVES_ARRAYSIZE = CURVES_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CURVES_descriptor();
template<typename T>
inline const std::string& CURVES_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CURVES>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CURVES_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CURVES_descriptor(), enum_t_value);
}
inline bool CURVES_Parse(
    const std::string& name, CURVES* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CURVES>(
    CURVES_descriptor(), name, value);
}
// ===================================================================

class Bip32Path :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.Bip32Path) */ {
 public:
  Bip32Path();
  virtual ~Bip32Path();

  Bip32Path(const Bip32Path& from);
  Bip32Path(Bip32Path&& from) noexcept
    : Bip32Path() {
    *this = ::std::move(from);
  }

  inline Bip32Path& operator=(const Bip32Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bip32Path& operator=(Bip32Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bip32Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bip32Path* internal_default_instance() {
    return reinterpret_cast<const Bip32Path*>(
               &_Bip32Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Bip32Path& a, Bip32Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Bip32Path* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bip32Path* New() const final {
    return CreateMaybeMessage<Bip32Path>(nullptr);
  }

  Bip32Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bip32Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bip32Path& from);
  void MergeFrom(const Bip32Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bip32Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.Bip32Path";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressIndexFieldNumber = 2,
    kChangeFieldNumber = 1,
  };
  // uint64 addressIndex = 2;
  void clear_addressindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 addressindex() const;
  void set_addressindex(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // bool change = 1;
  void clear_change();
  bool change() const;
  void set_change(bool value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.Bip32Path)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 addressindex_;
  bool change_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(nullptr);
  }

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.DeviceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
    kLabelFieldNumber = 2,
    kBleVersionFieldNumber = 3,
    kFirmwareVersionFieldNumber = 4,
    kPinRetryFieldNumber = 5,
    kPinMaxRetryFieldNumber = 6,
  };
  // string sn = 1;
  void clear_sn();
  const std::string& sn() const;
  void set_sn(const std::string& value);
  void set_sn(std::string&& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  std::string* mutable_sn();
  std::string* release_sn();
  void set_allocated_sn(std::string* sn);

  // string label = 2;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // string bleVersion = 3;
  void clear_bleversion();
  const std::string& bleversion() const;
  void set_bleversion(const std::string& value);
  void set_bleversion(std::string&& value);
  void set_bleversion(const char* value);
  void set_bleversion(const char* value, size_t size);
  std::string* mutable_bleversion();
  std::string* release_bleversion();
  void set_allocated_bleversion(std::string* bleversion);

  // string firmwareVersion = 4;
  void clear_firmwareversion();
  const std::string& firmwareversion() const;
  void set_firmwareversion(const std::string& value);
  void set_firmwareversion(std::string&& value);
  void set_firmwareversion(const char* value);
  void set_firmwareversion(const char* value, size_t size);
  std::string* mutable_firmwareversion();
  std::string* release_firmwareversion();
  void set_allocated_firmwareversion(std::string* firmwareversion);

  // uint32 pinRetry = 5;
  void clear_pinretry();
  ::PROTOBUF_NAMESPACE_ID::uint32 pinretry() const;
  void set_pinretry(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 pinMaxRetry = 6;
  void clear_pinmaxretry();
  ::PROTOBUF_NAMESPACE_ID::uint32 pinmaxretry() const;
  void set_pinmaxretry(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.DeviceInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bleversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmwareversion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pinretry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pinmaxretry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// -------------------------------------------------------------------

class ResultInt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.ResultInt) */ {
 public:
  ResultInt();
  virtual ~ResultInt();

  ResultInt(const ResultInt& from);
  ResultInt(ResultInt&& from) noexcept
    : ResultInt() {
    *this = ::std::move(from);
  }

  inline ResultInt& operator=(const ResultInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultInt& operator=(ResultInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultInt* internal_default_instance() {
    return reinterpret_cast<const ResultInt*>(
               &_ResultInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResultInt& a, ResultInt& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultInt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultInt* New() const final {
    return CreateMaybeMessage<ResultInt>(nullptr);
  }

  ResultInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultInt& from);
  void MergeFrom(const ResultInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.ResultInt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRvFieldNumber = 1,
    kResFieldNumber = 2,
  };
  // uint64 rv = 1;
  void clear_rv();
  ::PROTOBUF_NAMESPACE_ID::uint64 rv() const;
  void set_rv(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 res = 2;
  void clear_res();
  ::PROTOBUF_NAMESPACE_ID::uint32 res() const;
  void set_res(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.ResultInt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// -------------------------------------------------------------------

class ResultString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.ResultString) */ {
 public:
  ResultString();
  virtual ~ResultString();

  ResultString(const ResultString& from);
  ResultString(ResultString&& from) noexcept
    : ResultString() {
    *this = ::std::move(from);
  }

  inline ResultString& operator=(const ResultString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultString& operator=(ResultString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultString* internal_default_instance() {
    return reinterpret_cast<const ResultString*>(
               &_ResultString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResultString& a, ResultString& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultString* New() const final {
    return CreateMaybeMessage<ResultString>(nullptr);
  }

  ResultString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultString& from);
  void MergeFrom(const ResultString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.ResultString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 2,
    kRvFieldNumber = 1,
  };
  // string res = 2;
  void clear_res();
  const std::string& res() const;
  void set_res(const std::string& value);
  void set_res(std::string&& value);
  void set_res(const char* value);
  void set_res(const char* value, size_t size);
  std::string* mutable_res();
  std::string* release_res();
  void set_allocated_res(std::string* res);

  // uint64 rv = 1;
  void clear_rv();
  ::PROTOBUF_NAMESPACE_ID::uint64 rv() const;
  void set_rv(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.ResultString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Bip32Path

// bool change = 1;
inline void Bip32Path::clear_change() {
  change_ = false;
}
inline bool Bip32Path::change() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.Bip32Path.change)
  return change_;
}
inline void Bip32Path::set_change(bool value) {
  
  change_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.Bip32Path.change)
}

// uint64 addressIndex = 2;
inline void Bip32Path::clear_addressindex() {
  addressindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bip32Path::addressindex() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.Bip32Path.addressIndex)
  return addressindex_;
}
inline void Bip32Path::set_addressindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  addressindex_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.Bip32Path.addressIndex)
}

// -------------------------------------------------------------------

// DeviceInfo

// string sn = 1;
inline void DeviceInfo::clear_sn() {
  sn_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::sn() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.sn)
  return sn_.GetNoArena();
}
inline void DeviceInfo::set_sn(const std::string& value) {
  
  sn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.sn)
}
inline void DeviceInfo::set_sn(std::string&& value) {
  
  sn_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.DeviceInfo.sn)
}
inline void DeviceInfo::set_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.DeviceInfo.sn)
}
inline void DeviceInfo::set_sn(const char* value, size_t size) {
  
  sn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.DeviceInfo.sn)
}
inline std::string* DeviceInfo::mutable_sn() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.DeviceInfo.sn)
  return sn_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_sn() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.DeviceInfo.sn)
  
  return sn_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_sn(std::string* sn) {
  if (sn != nullptr) {
    
  } else {
    
  }
  sn_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.DeviceInfo.sn)
}

// string label = 2;
inline void DeviceInfo::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::label() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.label)
  return label_.GetNoArena();
}
inline void DeviceInfo::set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.label)
}
inline void DeviceInfo::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.DeviceInfo.label)
}
inline void DeviceInfo::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.DeviceInfo.label)
}
inline void DeviceInfo::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.DeviceInfo.label)
}
inline std::string* DeviceInfo::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.DeviceInfo.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_label() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.DeviceInfo.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.DeviceInfo.label)
}

// string bleVersion = 3;
inline void DeviceInfo::clear_bleversion() {
  bleversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::bleversion() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.bleVersion)
  return bleversion_.GetNoArena();
}
inline void DeviceInfo::set_bleversion(const std::string& value) {
  
  bleversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.bleVersion)
}
inline void DeviceInfo::set_bleversion(std::string&& value) {
  
  bleversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.DeviceInfo.bleVersion)
}
inline void DeviceInfo::set_bleversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bleversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.DeviceInfo.bleVersion)
}
inline void DeviceInfo::set_bleversion(const char* value, size_t size) {
  
  bleversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.DeviceInfo.bleVersion)
}
inline std::string* DeviceInfo::mutable_bleversion() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.DeviceInfo.bleVersion)
  return bleversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_bleversion() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.DeviceInfo.bleVersion)
  
  return bleversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_bleversion(std::string* bleversion) {
  if (bleversion != nullptr) {
    
  } else {
    
  }
  bleversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bleversion);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.DeviceInfo.bleVersion)
}

// string firmwareVersion = 4;
inline void DeviceInfo::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::firmwareversion() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.firmwareVersion)
  return firmwareversion_.GetNoArena();
}
inline void DeviceInfo::set_firmwareversion(const std::string& value) {
  
  firmwareversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.firmwareVersion)
}
inline void DeviceInfo::set_firmwareversion(std::string&& value) {
  
  firmwareversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.DeviceInfo.firmwareVersion)
}
inline void DeviceInfo::set_firmwareversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firmwareversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.DeviceInfo.firmwareVersion)
}
inline void DeviceInfo::set_firmwareversion(const char* value, size_t size) {
  
  firmwareversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.DeviceInfo.firmwareVersion)
}
inline std::string* DeviceInfo::mutable_firmwareversion() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.DeviceInfo.firmwareVersion)
  return firmwareversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.DeviceInfo.firmwareVersion)
  
  return firmwareversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_firmwareversion(std::string* firmwareversion) {
  if (firmwareversion != nullptr) {
    
  } else {
    
  }
  firmwareversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.DeviceInfo.firmwareVersion)
}

// uint32 pinRetry = 5;
inline void DeviceInfo::clear_pinretry() {
  pinretry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceInfo::pinretry() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.pinRetry)
  return pinretry_;
}
inline void DeviceInfo::set_pinretry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pinretry_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.pinRetry)
}

// uint32 pinMaxRetry = 6;
inline void DeviceInfo::clear_pinmaxretry() {
  pinmaxretry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceInfo::pinmaxretry() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.pinMaxRetry)
  return pinmaxretry_;
}
inline void DeviceInfo::set_pinmaxretry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pinmaxretry_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.pinMaxRetry)
}

// -------------------------------------------------------------------

// ResultInt

// uint64 rv = 1;
inline void ResultInt::clear_rv() {
  rv_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResultInt::rv() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultInt.rv)
  return rv_;
}
inline void ResultInt::set_rv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rv_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultInt.rv)
}

// uint32 res = 2;
inline void ResultInt::clear_res() {
  res_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResultInt::res() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultInt.res)
  return res_;
}
inline void ResultInt::set_res(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultInt.res)
}

// -------------------------------------------------------------------

// ResultString

// uint64 rv = 1;
inline void ResultString::clear_rv() {
  rv_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResultString::rv() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultString.rv)
  return rv_;
}
inline void ResultString::set_rv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rv_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultString.rv)
}

// string res = 2;
inline void ResultString::clear_res() {
  res_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResultString::res() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultString.res)
  return res_.GetNoArena();
}
inline void ResultString::set_res(const std::string& value) {
  
  res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultString.res)
}
inline void ResultString::set_res(std::string&& value) {
  
  res_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.ResultString.res)
}
inline void ResultString::set_res(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.ResultString.res)
}
inline void ResultString::set_res(const char* value, size_t size) {
  
  res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.ResultString.res)
}
inline std::string* ResultString::mutable_res() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.ResultString.res)
  return res_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResultString::release_res() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.ResultString.res)
  
  return res_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResultString::set_allocated_res(std::string* res) {
  if (res != nullptr) {
    
  } else {
    
  }
  res_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.ResultString.res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common
}  // namespace Proto
}  // namespace JUB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JUB::Proto::Common::ENUM_COINTYPE_BTC> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::ENUM_COINTYPE_BTC>() {
  return ::JUB::Proto::Common::ENUM_COINTYPE_BTC_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Common::ENUM_MNEMONIC_STRENGTH> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::ENUM_MNEMONIC_STRENGTH>() {
  return ::JUB::Proto::Common::ENUM_MNEMONIC_STRENGTH_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Common::CURVES> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::CURVES>() {
  return ::JUB::Proto::Common::CURVES_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Jub_5fCommon_2eproto
