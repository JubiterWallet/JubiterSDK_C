// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_Ethereum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Jub_5fEthereum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Jub_5fEthereum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Jub_Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Jub_5fEthereum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Jub_5fEthereum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Jub_5fEthereum_2eproto;
namespace JUB {
namespace Proto {
namespace Ethereum {
class ContextCfgETH;
class ContextCfgETHDefaultTypeInternal;
extern ContextCfgETHDefaultTypeInternal _ContextCfgETH_default_instance_;
class Erc20Builder;
class Erc20BuilderDefaultTypeInternal;
extern Erc20BuilderDefaultTypeInternal _Erc20Builder_default_instance_;
class TransactionETH;
class TransactionETHDefaultTypeInternal;
extern TransactionETHDefaultTypeInternal _TransactionETH_default_instance_;
}  // namespace Ethereum
}  // namespace Proto
}  // namespace JUB
PROTOBUF_NAMESPACE_OPEN
template<> ::JUB::Proto::Ethereum::ContextCfgETH* Arena::CreateMaybeMessage<::JUB::Proto::Ethereum::ContextCfgETH>(Arena*);
template<> ::JUB::Proto::Ethereum::Erc20Builder* Arena::CreateMaybeMessage<::JUB::Proto::Ethereum::Erc20Builder>(Arena*);
template<> ::JUB::Proto::Ethereum::TransactionETH* Arena::CreateMaybeMessage<::JUB::Proto::Ethereum::TransactionETH>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JUB {
namespace Proto {
namespace Ethereum {

enum ENUM_PUB_FORMAT : int {
  HEX = 0,
  XPUB = 1,
  ENUM_PUB_FORMAT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_PUB_FORMAT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_PUB_FORMAT_IsValid(int value);
constexpr ENUM_PUB_FORMAT ENUM_PUB_FORMAT_MIN = HEX;
constexpr ENUM_PUB_FORMAT ENUM_PUB_FORMAT_MAX = XPUB;
constexpr int ENUM_PUB_FORMAT_ARRAYSIZE = ENUM_PUB_FORMAT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_PUB_FORMAT_descriptor();
template<typename T>
inline const std::string& ENUM_PUB_FORMAT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_PUB_FORMAT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_PUB_FORMAT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_PUB_FORMAT_descriptor(), enum_t_value);
}
inline bool ENUM_PUB_FORMAT_Parse(
    const std::string& name, ENUM_PUB_FORMAT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_PUB_FORMAT>(
    ENUM_PUB_FORMAT_descriptor(), name, value);
}
// ===================================================================

class ContextCfgETH :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Ethereum.ContextCfgETH) */ {
 public:
  ContextCfgETH();
  virtual ~ContextCfgETH();

  ContextCfgETH(const ContextCfgETH& from);
  ContextCfgETH(ContextCfgETH&& from) noexcept
    : ContextCfgETH() {
    *this = ::std::move(from);
  }

  inline ContextCfgETH& operator=(const ContextCfgETH& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContextCfgETH& operator=(ContextCfgETH&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContextCfgETH& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContextCfgETH* internal_default_instance() {
    return reinterpret_cast<const ContextCfgETH*>(
               &_ContextCfgETH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContextCfgETH& a, ContextCfgETH& b) {
    a.Swap(&b);
  }
  inline void Swap(ContextCfgETH* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContextCfgETH* New() const final {
    return CreateMaybeMessage<ContextCfgETH>(nullptr);
  }

  ContextCfgETH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContextCfgETH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContextCfgETH& from);
  void MergeFrom(const ContextCfgETH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContextCfgETH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Ethereum.ContextCfgETH";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fEthereum_2eproto);
    return ::descriptor_table_Jub_5fEthereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainPathFieldNumber = 1,
    kChainIDFieldNumber = 2,
  };
  // string main_path = 1;
  void clear_main_path();
  const std::string& main_path() const;
  void set_main_path(const std::string& value);
  void set_main_path(std::string&& value);
  void set_main_path(const char* value);
  void set_main_path(const char* value, size_t size);
  std::string* mutable_main_path();
  std::string* release_main_path();
  void set_allocated_main_path(std::string* main_path);

  // uint32 chainID = 2;
  void clear_chainid();
  ::PROTOBUF_NAMESPACE_ID::uint32 chainid() const;
  void set_chainid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Ethereum.ContextCfgETH)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chainid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fEthereum_2eproto;
};
// -------------------------------------------------------------------

class Erc20Builder :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Ethereum.Erc20Builder) */ {
 public:
  Erc20Builder();
  virtual ~Erc20Builder();

  Erc20Builder(const Erc20Builder& from);
  Erc20Builder(Erc20Builder&& from) noexcept
    : Erc20Builder() {
    *this = ::std::move(from);
  }

  inline Erc20Builder& operator=(const Erc20Builder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Erc20Builder& operator=(Erc20Builder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Erc20Builder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Erc20Builder* internal_default_instance() {
    return reinterpret_cast<const Erc20Builder*>(
               &_Erc20Builder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Erc20Builder& a, Erc20Builder& b) {
    a.Swap(&b);
  }
  inline void Swap(Erc20Builder* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Erc20Builder* New() const final {
    return CreateMaybeMessage<Erc20Builder>(nullptr);
  }

  Erc20Builder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Erc20Builder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Erc20Builder& from);
  void MergeFrom(const Erc20Builder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Erc20Builder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Ethereum.Erc20Builder";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fEthereum_2eproto);
    return ::descriptor_table_Jub_5fEthereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenToFieldNumber = 1,
    kTokenValueInWeiFieldNumber = 2,
  };
  // string tokenTo = 1;
  void clear_tokento();
  const std::string& tokento() const;
  void set_tokento(const std::string& value);
  void set_tokento(std::string&& value);
  void set_tokento(const char* value);
  void set_tokento(const char* value, size_t size);
  std::string* mutable_tokento();
  std::string* release_tokento();
  void set_allocated_tokento(std::string* tokento);

  // string tokenValueInWei = 2;
  void clear_tokenvalueinwei();
  const std::string& tokenvalueinwei() const;
  void set_tokenvalueinwei(const std::string& value);
  void set_tokenvalueinwei(std::string&& value);
  void set_tokenvalueinwei(const char* value);
  void set_tokenvalueinwei(const char* value, size_t size);
  std::string* mutable_tokenvalueinwei();
  std::string* release_tokenvalueinwei();
  void set_allocated_tokenvalueinwei(std::string* tokenvalueinwei);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Ethereum.Erc20Builder)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tokento_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tokenvalueinwei_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fEthereum_2eproto;
};
// -------------------------------------------------------------------

class TransactionETH :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Ethereum.TransactionETH) */ {
 public:
  TransactionETH();
  virtual ~TransactionETH();

  TransactionETH(const TransactionETH& from);
  TransactionETH(TransactionETH&& from) noexcept
    : TransactionETH() {
    *this = ::std::move(from);
  }

  inline TransactionETH& operator=(const TransactionETH& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionETH& operator=(TransactionETH&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionETH& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionETH* internal_default_instance() {
    return reinterpret_cast<const TransactionETH*>(
               &_TransactionETH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransactionETH& a, TransactionETH& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionETH* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionETH* New() const final {
    return CreateMaybeMessage<TransactionETH>(nullptr);
  }

  TransactionETH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionETH>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionETH& from);
  void MergeFrom(const TransactionETH& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionETH* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Ethereum.TransactionETH";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fEthereum_2eproto);
    return ::descriptor_table_Jub_5fEthereum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGasPriceInWeiFieldNumber = 4,
    kToFieldNumber = 5,
    kValueInWeiFieldNumber = 6,
    kInputFieldNumber = 7,
    kPathFieldNumber = 1,
    kNonceFieldNumber = 2,
    kGasLimitFieldNumber = 3,
  };
  // string gasPriceInWei = 4;
  void clear_gaspriceinwei();
  const std::string& gaspriceinwei() const;
  void set_gaspriceinwei(const std::string& value);
  void set_gaspriceinwei(std::string&& value);
  void set_gaspriceinwei(const char* value);
  void set_gaspriceinwei(const char* value, size_t size);
  std::string* mutable_gaspriceinwei();
  std::string* release_gaspriceinwei();
  void set_allocated_gaspriceinwei(std::string* gaspriceinwei);

  // string to = 5;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);

  // string valueInWei = 6;
  void clear_valueinwei();
  const std::string& valueinwei() const;
  void set_valueinwei(const std::string& value);
  void set_valueinwei(std::string&& value);
  void set_valueinwei(const char* value);
  void set_valueinwei(const char* value, size_t size);
  std::string* mutable_valueinwei();
  std::string* release_valueinwei();
  void set_allocated_valueinwei(std::string* valueinwei);

  // string input = 7;
  void clear_input();
  const std::string& input() const;
  void set_input(const std::string& value);
  void set_input(std::string&& value);
  void set_input(const char* value);
  void set_input(const char* value, size_t size);
  std::string* mutable_input();
  std::string* release_input();
  void set_allocated_input(std::string* input);

  // .JUB.Proto.Common.Bip32Path path = 1;
  bool has_path() const;
  void clear_path();
  const ::JUB::Proto::Common::Bip32Path& path() const;
  ::JUB::Proto::Common::Bip32Path* release_path();
  ::JUB::Proto::Common::Bip32Path* mutable_path();
  void set_allocated_path(::JUB::Proto::Common::Bip32Path* path);

  // uint32 nonce = 2;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint32 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 gasLimit = 3;
  void clear_gaslimit();
  ::PROTOBUF_NAMESPACE_ID::uint32 gaslimit() const;
  void set_gaslimit(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Ethereum.TransactionETH)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gaspriceinwei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valueinwei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
  ::JUB::Proto::Common::Bip32Path* path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gaslimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fEthereum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContextCfgETH

// string main_path = 1;
inline void ContextCfgETH::clear_main_path() {
  main_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContextCfgETH::main_path() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ethereum.ContextCfgETH.main_path)
  return main_path_.GetNoArena();
}
inline void ContextCfgETH::set_main_path(const std::string& value) {
  
  main_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ethereum.ContextCfgETH.main_path)
}
inline void ContextCfgETH::set_main_path(std::string&& value) {
  
  main_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ethereum.ContextCfgETH.main_path)
}
inline void ContextCfgETH::set_main_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  main_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ethereum.ContextCfgETH.main_path)
}
inline void ContextCfgETH::set_main_path(const char* value, size_t size) {
  
  main_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ethereum.ContextCfgETH.main_path)
}
inline std::string* ContextCfgETH::mutable_main_path() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ethereum.ContextCfgETH.main_path)
  return main_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContextCfgETH::release_main_path() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ethereum.ContextCfgETH.main_path)
  
  return main_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContextCfgETH::set_allocated_main_path(std::string* main_path) {
  if (main_path != nullptr) {
    
  } else {
    
  }
  main_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_path);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ethereum.ContextCfgETH.main_path)
}

// uint32 chainID = 2;
inline void ContextCfgETH::clear_chainid() {
  chainid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContextCfgETH::chainid() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ethereum.ContextCfgETH.chainID)
  return chainid_;
}
inline void ContextCfgETH::set_chainid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chainid_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Ethereum.ContextCfgETH.chainID)
}

// -------------------------------------------------------------------

// Erc20Builder

// string tokenTo = 1;
inline void Erc20Builder::clear_tokento() {
  tokento_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Erc20Builder::tokento() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ethereum.Erc20Builder.tokenTo)
  return tokento_.GetNoArena();
}
inline void Erc20Builder::set_tokento(const std::string& value) {
  
  tokento_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ethereum.Erc20Builder.tokenTo)
}
inline void Erc20Builder::set_tokento(std::string&& value) {
  
  tokento_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ethereum.Erc20Builder.tokenTo)
}
inline void Erc20Builder::set_tokento(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tokento_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ethereum.Erc20Builder.tokenTo)
}
inline void Erc20Builder::set_tokento(const char* value, size_t size) {
  
  tokento_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ethereum.Erc20Builder.tokenTo)
}
inline std::string* Erc20Builder::mutable_tokento() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ethereum.Erc20Builder.tokenTo)
  return tokento_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Erc20Builder::release_tokento() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ethereum.Erc20Builder.tokenTo)
  
  return tokento_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Erc20Builder::set_allocated_tokento(std::string* tokento) {
  if (tokento != nullptr) {
    
  } else {
    
  }
  tokento_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tokento);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ethereum.Erc20Builder.tokenTo)
}

// string tokenValueInWei = 2;
inline void Erc20Builder::clear_tokenvalueinwei() {
  tokenvalueinwei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Erc20Builder::tokenvalueinwei() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ethereum.Erc20Builder.tokenValueInWei)
  return tokenvalueinwei_.GetNoArena();
}
inline void Erc20Builder::set_tokenvalueinwei(const std::string& value) {
  
  tokenvalueinwei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ethereum.Erc20Builder.tokenValueInWei)
}
inline void Erc20Builder::set_tokenvalueinwei(std::string&& value) {
  
  tokenvalueinwei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ethereum.Erc20Builder.tokenValueInWei)
}
inline void Erc20Builder::set_tokenvalueinwei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tokenvalueinwei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ethereum.Erc20Builder.tokenValueInWei)
}
inline void Erc20Builder::set_tokenvalueinwei(const char* value, size_t size) {
  
  tokenvalueinwei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ethereum.Erc20Builder.tokenValueInWei)
}
inline std::string* Erc20Builder::mutable_tokenvalueinwei() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ethereum.Erc20Builder.tokenValueInWei)
  return tokenvalueinwei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Erc20Builder::release_tokenvalueinwei() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ethereum.Erc20Builder.tokenValueInWei)
  
  return tokenvalueinwei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Erc20Builder::set_allocated_tokenvalueinwei(std::string* tokenvalueinwei) {
  if (tokenvalueinwei != nullptr) {
    
  } else {
    
  }
  tokenvalueinwei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tokenvalueinwei);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ethereum.Erc20Builder.tokenValueInWei)
}

// -------------------------------------------------------------------

// TransactionETH

// .JUB.Proto.Common.Bip32Path path = 1;
inline bool TransactionETH::has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline const ::JUB::Proto::Common::Bip32Path& TransactionETH::path() const {
  const ::JUB::Proto::Common::Bip32Path* p = path_;
  // @@protoc_insertion_point(field_get:JUB.Proto.Ethereum.TransactionETH.path)
  return p != nullptr ? *p : *reinterpret_cast<const ::JUB::Proto::Common::Bip32Path*>(
      &::JUB::Proto::Common::_Bip32Path_default_instance_);
}
inline ::JUB::Proto::Common::Bip32Path* TransactionETH::release_path() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ethereum.TransactionETH.path)
  
  ::JUB::Proto::Common::Bip32Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::JUB::Proto::Common::Bip32Path* TransactionETH::mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::JUB::Proto::Common::Bip32Path>(GetArenaNoVirtual());
    path_ = p;
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ethereum.TransactionETH.path)
  return path_;
}
inline void TransactionETH::set_allocated_path(::JUB::Proto::Common::Bip32Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ethereum.TransactionETH.path)
}

// uint32 nonce = 2;
inline void TransactionETH::clear_nonce() {
  nonce_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionETH::nonce() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ethereum.TransactionETH.nonce)
  return nonce_;
}
inline void TransactionETH::set_nonce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Ethereum.TransactionETH.nonce)
}

// uint32 gasLimit = 3;
inline void TransactionETH::clear_gaslimit() {
  gaslimit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionETH::gaslimit() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ethereum.TransactionETH.gasLimit)
  return gaslimit_;
}
inline void TransactionETH::set_gaslimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gaslimit_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Ethereum.TransactionETH.gasLimit)
}

// string gasPriceInWei = 4;
inline void TransactionETH::clear_gaspriceinwei() {
  gaspriceinwei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionETH::gaspriceinwei() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ethereum.TransactionETH.gasPriceInWei)
  return gaspriceinwei_.GetNoArena();
}
inline void TransactionETH::set_gaspriceinwei(const std::string& value) {
  
  gaspriceinwei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ethereum.TransactionETH.gasPriceInWei)
}
inline void TransactionETH::set_gaspriceinwei(std::string&& value) {
  
  gaspriceinwei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ethereum.TransactionETH.gasPriceInWei)
}
inline void TransactionETH::set_gaspriceinwei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gaspriceinwei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ethereum.TransactionETH.gasPriceInWei)
}
inline void TransactionETH::set_gaspriceinwei(const char* value, size_t size) {
  
  gaspriceinwei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ethereum.TransactionETH.gasPriceInWei)
}
inline std::string* TransactionETH::mutable_gaspriceinwei() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ethereum.TransactionETH.gasPriceInWei)
  return gaspriceinwei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionETH::release_gaspriceinwei() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ethereum.TransactionETH.gasPriceInWei)
  
  return gaspriceinwei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionETH::set_allocated_gaspriceinwei(std::string* gaspriceinwei) {
  if (gaspriceinwei != nullptr) {
    
  } else {
    
  }
  gaspriceinwei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gaspriceinwei);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ethereum.TransactionETH.gasPriceInWei)
}

// string to = 5;
inline void TransactionETH::clear_to() {
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionETH::to() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ethereum.TransactionETH.to)
  return to_.GetNoArena();
}
inline void TransactionETH::set_to(const std::string& value) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ethereum.TransactionETH.to)
}
inline void TransactionETH::set_to(std::string&& value) {
  
  to_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ethereum.TransactionETH.to)
}
inline void TransactionETH::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ethereum.TransactionETH.to)
}
inline void TransactionETH::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ethereum.TransactionETH.to)
}
inline std::string* TransactionETH::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ethereum.TransactionETH.to)
  return to_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionETH::release_to() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ethereum.TransactionETH.to)
  
  return to_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionETH::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ethereum.TransactionETH.to)
}

// string valueInWei = 6;
inline void TransactionETH::clear_valueinwei() {
  valueinwei_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionETH::valueinwei() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ethereum.TransactionETH.valueInWei)
  return valueinwei_.GetNoArena();
}
inline void TransactionETH::set_valueinwei(const std::string& value) {
  
  valueinwei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ethereum.TransactionETH.valueInWei)
}
inline void TransactionETH::set_valueinwei(std::string&& value) {
  
  valueinwei_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ethereum.TransactionETH.valueInWei)
}
inline void TransactionETH::set_valueinwei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  valueinwei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ethereum.TransactionETH.valueInWei)
}
inline void TransactionETH::set_valueinwei(const char* value, size_t size) {
  
  valueinwei_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ethereum.TransactionETH.valueInWei)
}
inline std::string* TransactionETH::mutable_valueinwei() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ethereum.TransactionETH.valueInWei)
  return valueinwei_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionETH::release_valueinwei() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ethereum.TransactionETH.valueInWei)
  
  return valueinwei_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionETH::set_allocated_valueinwei(std::string* valueinwei) {
  if (valueinwei != nullptr) {
    
  } else {
    
  }
  valueinwei_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), valueinwei);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ethereum.TransactionETH.valueInWei)
}

// string input = 7;
inline void TransactionETH::clear_input() {
  input_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionETH::input() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ethereum.TransactionETH.input)
  return input_.GetNoArena();
}
inline void TransactionETH::set_input(const std::string& value) {
  
  input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ethereum.TransactionETH.input)
}
inline void TransactionETH::set_input(std::string&& value) {
  
  input_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ethereum.TransactionETH.input)
}
inline void TransactionETH::set_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ethereum.TransactionETH.input)
}
inline void TransactionETH::set_input(const char* value, size_t size) {
  
  input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ethereum.TransactionETH.input)
}
inline std::string* TransactionETH::mutable_input() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ethereum.TransactionETH.input)
  return input_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionETH::release_input() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ethereum.TransactionETH.input)
  
  return input_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionETH::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  input_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ethereum.TransactionETH.input)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Ethereum
}  // namespace Proto
}  // namespace JUB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JUB::Proto::Ethereum::ENUM_PUB_FORMAT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Ethereum::ENUM_PUB_FORMAT>() {
  return ::JUB::Proto::Ethereum::ENUM_PUB_FORMAT_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Jub_5fEthereum_2eproto
