// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_Bitcoin.proto

#ifndef PROTOBUF_Jub_5fBitcoin_2eproto__INCLUDED
#define PROTOBUF_Jub_5fBitcoin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Jub_Common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Jub_5fBitcoin_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsContextCfgBTCImpl();
void InitDefaultsContextCfgBTC();
void InitDefaultsInputBTCImpl();
void InitDefaultsInputBTC();
void InitDefaultsStandardOutputImpl();
void InitDefaultsStandardOutput();
void InitDefaultsReturn0OutputImpl();
void InitDefaultsReturn0Output();
void InitDefaultsQRC20OutputImpl();
void InitDefaultsQRC20Output();
void InitDefaultsOutputBTCImpl();
void InitDefaultsOutputBTC();
void InitDefaultsTransactionBTCImpl();
void InitDefaultsTransactionBTC();
inline void InitDefaults() {
  InitDefaultsContextCfgBTC();
  InitDefaultsInputBTC();
  InitDefaultsStandardOutput();
  InitDefaultsReturn0Output();
  InitDefaultsQRC20Output();
  InitDefaultsOutputBTC();
  InitDefaultsTransactionBTC();
}
}  // namespace protobuf_Jub_5fBitcoin_2eproto
namespace JUB {
namespace Proto {
namespace Bitcoin {
class ContextCfgBTC;
class ContextCfgBTCDefaultTypeInternal;
extern ContextCfgBTCDefaultTypeInternal _ContextCfgBTC_default_instance_;
class InputBTC;
class InputBTCDefaultTypeInternal;
extern InputBTCDefaultTypeInternal _InputBTC_default_instance_;
class OutputBTC;
class OutputBTCDefaultTypeInternal;
extern OutputBTCDefaultTypeInternal _OutputBTC_default_instance_;
class QRC20Output;
class QRC20OutputDefaultTypeInternal;
extern QRC20OutputDefaultTypeInternal _QRC20Output_default_instance_;
class Return0Output;
class Return0OutputDefaultTypeInternal;
extern Return0OutputDefaultTypeInternal _Return0Output_default_instance_;
class StandardOutput;
class StandardOutputDefaultTypeInternal;
extern StandardOutputDefaultTypeInternal _StandardOutput_default_instance_;
class TransactionBTC;
class TransactionBTCDefaultTypeInternal;
extern TransactionBTCDefaultTypeInternal _TransactionBTC_default_instance_;
}  // namespace Bitcoin
}  // namespace Proto
}  // namespace JUB
namespace JUB {
namespace Proto {
namespace Bitcoin {

enum ENUM_COIN_TYPE_BTC {
  COINBTC = 0,
  COINBCH = 1,
  COINLTC = 2,
  COINUSDT = 3,
  COINDASH = 4,
  COINQTUM = 5,
  ENUM_COIN_TYPE_BTC_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ENUM_COIN_TYPE_BTC_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ENUM_COIN_TYPE_BTC_IsValid(int value);
const ENUM_COIN_TYPE_BTC ENUM_COIN_TYPE_BTC_MIN = COINBTC;
const ENUM_COIN_TYPE_BTC ENUM_COIN_TYPE_BTC_MAX = COINQTUM;
const int ENUM_COIN_TYPE_BTC_ARRAYSIZE = ENUM_COIN_TYPE_BTC_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENUM_COIN_TYPE_BTC_descriptor();
inline const ::std::string& ENUM_COIN_TYPE_BTC_Name(ENUM_COIN_TYPE_BTC value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENUM_COIN_TYPE_BTC_descriptor(), value);
}
inline bool ENUM_COIN_TYPE_BTC_Parse(
    const ::std::string& name, ENUM_COIN_TYPE_BTC* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENUM_COIN_TYPE_BTC>(
    ENUM_COIN_TYPE_BTC_descriptor(), name, value);
}
enum ENUM_TRAN_STYPE_BTC {
  p2pkh = 0,
  p2sh_p2wpkh = 1,
  p2sh_multisig = 2,
  p2pk = 3,
  ENUM_TRAN_STYPE_BTC_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ENUM_TRAN_STYPE_BTC_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ENUM_TRAN_STYPE_BTC_IsValid(int value);
const ENUM_TRAN_STYPE_BTC ENUM_TRAN_STYPE_BTC_MIN = p2pkh;
const ENUM_TRAN_STYPE_BTC ENUM_TRAN_STYPE_BTC_MAX = p2pk;
const int ENUM_TRAN_STYPE_BTC_ARRAYSIZE = ENUM_TRAN_STYPE_BTC_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENUM_TRAN_STYPE_BTC_descriptor();
inline const ::std::string& ENUM_TRAN_STYPE_BTC_Name(ENUM_TRAN_STYPE_BTC value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENUM_TRAN_STYPE_BTC_descriptor(), value);
}
inline bool ENUM_TRAN_STYPE_BTC_Parse(
    const ::std::string& name, ENUM_TRAN_STYPE_BTC* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENUM_TRAN_STYPE_BTC>(
    ENUM_TRAN_STYPE_BTC_descriptor(), name, value);
}
enum ENUM_SCRIPT_TYPE_BTC {
  STANDARD = 0,
  RETURN0 = 1,
  QRC20 = 3,
  ENUM_SCRIPT_TYPE_BTC_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ENUM_SCRIPT_TYPE_BTC_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ENUM_SCRIPT_TYPE_BTC_IsValid(int value);
const ENUM_SCRIPT_TYPE_BTC ENUM_SCRIPT_TYPE_BTC_MIN = STANDARD;
const ENUM_SCRIPT_TYPE_BTC ENUM_SCRIPT_TYPE_BTC_MAX = QRC20;
const int ENUM_SCRIPT_TYPE_BTC_ARRAYSIZE = ENUM_SCRIPT_TYPE_BTC_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENUM_SCRIPT_TYPE_BTC_descriptor();
inline const ::std::string& ENUM_SCRIPT_TYPE_BTC_Name(ENUM_SCRIPT_TYPE_BTC value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENUM_SCRIPT_TYPE_BTC_descriptor(), value);
}
inline bool ENUM_SCRIPT_TYPE_BTC_Parse(
    const ::std::string& name, ENUM_SCRIPT_TYPE_BTC* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENUM_SCRIPT_TYPE_BTC>(
    ENUM_SCRIPT_TYPE_BTC_descriptor(), name, value);
}
// ===================================================================

class ContextCfgBTC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Bitcoin.ContextCfgBTC) */ {
 public:
  ContextCfgBTC();
  virtual ~ContextCfgBTC();

  ContextCfgBTC(const ContextCfgBTC& from);

  inline ContextCfgBTC& operator=(const ContextCfgBTC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContextCfgBTC(ContextCfgBTC&& from) noexcept
    : ContextCfgBTC() {
    *this = ::std::move(from);
  }

  inline ContextCfgBTC& operator=(ContextCfgBTC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContextCfgBTC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContextCfgBTC* internal_default_instance() {
    return reinterpret_cast<const ContextCfgBTC*>(
               &_ContextCfgBTC_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ContextCfgBTC* other);
  friend void swap(ContextCfgBTC& a, ContextCfgBTC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContextCfgBTC* New() const PROTOBUF_FINAL { return New(NULL); }

  ContextCfgBTC* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ContextCfgBTC& from);
  void MergeFrom(const ContextCfgBTC& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ContextCfgBTC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string main_path = 1;
  void clear_main_path();
  static const int kMainPathFieldNumber = 1;
  const ::std::string& main_path() const;
  void set_main_path(const ::std::string& value);
  #if LANG_CXX11
  void set_main_path(::std::string&& value);
  #endif
  void set_main_path(const char* value);
  void set_main_path(const char* value, size_t size);
  ::std::string* mutable_main_path();
  ::std::string* release_main_path();
  void set_allocated_main_path(::std::string* main_path);

  // .JUB.Proto.Bitcoin.ENUM_COIN_TYPE_BTC coin_type = 2;
  void clear_coin_type();
  static const int kCoinTypeFieldNumber = 2;
  ::JUB::Proto::Bitcoin::ENUM_COIN_TYPE_BTC coin_type() const;
  void set_coin_type(::JUB::Proto::Bitcoin::ENUM_COIN_TYPE_BTC value);

  // .JUB.Proto.Bitcoin.ENUM_TRAN_STYPE_BTC trans_type = 3;
  void clear_trans_type();
  static const int kTransTypeFieldNumber = 3;
  ::JUB::Proto::Bitcoin::ENUM_TRAN_STYPE_BTC trans_type() const;
  void set_trans_type(::JUB::Proto::Bitcoin::ENUM_TRAN_STYPE_BTC value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Bitcoin.ContextCfgBTC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr main_path_;
  int coin_type_;
  int trans_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_Jub_5fBitcoin_2eproto::TableStruct;
  friend void ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsContextCfgBTCImpl();
};
// -------------------------------------------------------------------

class InputBTC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Bitcoin.InputBTC) */ {
 public:
  InputBTC();
  virtual ~InputBTC();

  InputBTC(const InputBTC& from);

  inline InputBTC& operator=(const InputBTC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InputBTC(InputBTC&& from) noexcept
    : InputBTC() {
    *this = ::std::move(from);
  }

  inline InputBTC& operator=(InputBTC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InputBTC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputBTC* internal_default_instance() {
    return reinterpret_cast<const InputBTC*>(
               &_InputBTC_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(InputBTC* other);
  friend void swap(InputBTC& a, InputBTC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InputBTC* New() const PROTOBUF_FINAL { return New(NULL); }

  InputBTC* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InputBTC& from);
  void MergeFrom(const InputBTC& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InputBTC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string preHash = 1;
  void clear_prehash();
  static const int kPreHashFieldNumber = 1;
  const ::std::string& prehash() const;
  void set_prehash(const ::std::string& value);
  #if LANG_CXX11
  void set_prehash(::std::string&& value);
  #endif
  void set_prehash(const char* value);
  void set_prehash(const char* value, size_t size);
  ::std::string* mutable_prehash();
  ::std::string* release_prehash();
  void set_allocated_prehash(::std::string* prehash);

  // .JUB.Proto.Common.Bip32Path path = 4;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 4;
  const ::JUB::Proto::Common::Bip32Path& path() const;
  ::JUB::Proto::Common::Bip32Path* release_path();
  ::JUB::Proto::Common::Bip32Path* mutable_path();
  void set_allocated_path(::JUB::Proto::Common::Bip32Path* path);

  // uint64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // uint32 preIndex = 2;
  void clear_preindex();
  static const int kPreIndexFieldNumber = 2;
  ::google::protobuf::uint32 preindex() const;
  void set_preindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Bitcoin.InputBTC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr prehash_;
  ::JUB::Proto::Common::Bip32Path* path_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 preindex_;
  mutable int _cached_size_;
  friend struct ::protobuf_Jub_5fBitcoin_2eproto::TableStruct;
  friend void ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsInputBTCImpl();
};
// -------------------------------------------------------------------

class StandardOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Bitcoin.StandardOutput) */ {
 public:
  StandardOutput();
  virtual ~StandardOutput();

  StandardOutput(const StandardOutput& from);

  inline StandardOutput& operator=(const StandardOutput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StandardOutput(StandardOutput&& from) noexcept
    : StandardOutput() {
    *this = ::std::move(from);
  }

  inline StandardOutput& operator=(StandardOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StandardOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StandardOutput* internal_default_instance() {
    return reinterpret_cast<const StandardOutput*>(
               &_StandardOutput_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StandardOutput* other);
  friend void swap(StandardOutput& a, StandardOutput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StandardOutput* New() const PROTOBUF_FINAL { return New(NULL); }

  StandardOutput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StandardOutput& from);
  void MergeFrom(const StandardOutput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StandardOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // .JUB.Proto.Common.Bip32Path path = 4;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 4;
  const ::JUB::Proto::Common::Bip32Path& path() const;
  ::JUB::Proto::Common::Bip32Path* release_path();
  ::JUB::Proto::Common::Bip32Path* mutable_path();
  void set_allocated_path(::JUB::Proto::Common::Bip32Path* path);

  // uint64 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // bool changeAddress = 3;
  void clear_changeaddress();
  static const int kChangeAddressFieldNumber = 3;
  bool changeaddress() const;
  void set_changeaddress(bool value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Bitcoin.StandardOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::JUB::Proto::Common::Bip32Path* path_;
  ::google::protobuf::uint64 amount_;
  bool changeaddress_;
  mutable int _cached_size_;
  friend struct ::protobuf_Jub_5fBitcoin_2eproto::TableStruct;
  friend void ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsStandardOutputImpl();
};
// -------------------------------------------------------------------

class Return0Output : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Bitcoin.Return0Output) */ {
 public:
  Return0Output();
  virtual ~Return0Output();

  Return0Output(const Return0Output& from);

  inline Return0Output& operator=(const Return0Output& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Return0Output(Return0Output&& from) noexcept
    : Return0Output() {
    *this = ::std::move(from);
  }

  inline Return0Output& operator=(Return0Output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Return0Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Return0Output* internal_default_instance() {
    return reinterpret_cast<const Return0Output*>(
               &_Return0Output_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Return0Output* other);
  friend void swap(Return0Output& a, Return0Output& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Return0Output* New() const PROTOBUF_FINAL { return New(NULL); }

  Return0Output* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Return0Output& from);
  void MergeFrom(const Return0Output& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Return0Output* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint64 amount = 1;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Bitcoin.Return0Output)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 amount_;
  mutable int _cached_size_;
  friend struct ::protobuf_Jub_5fBitcoin_2eproto::TableStruct;
  friend void ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsReturn0OutputImpl();
};
// -------------------------------------------------------------------

class QRC20Output : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Bitcoin.QRC20Output) */ {
 public:
  QRC20Output();
  virtual ~QRC20Output();

  QRC20Output(const QRC20Output& from);

  inline QRC20Output& operator=(const QRC20Output& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QRC20Output(QRC20Output&& from) noexcept
    : QRC20Output() {
    *this = ::std::move(from);
  }

  inline QRC20Output& operator=(QRC20Output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QRC20Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QRC20Output* internal_default_instance() {
    return reinterpret_cast<const QRC20Output*>(
               &_QRC20Output_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(QRC20Output* other);
  friend void swap(QRC20Output& a, QRC20Output& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QRC20Output* New() const PROTOBUF_FINAL { return New(NULL); }

  QRC20Output* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QRC20Output& from);
  void MergeFrom(const QRC20Output& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QRC20Output* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Bitcoin.QRC20Output)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_Jub_5fBitcoin_2eproto::TableStruct;
  friend void ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsQRC20OutputImpl();
};
// -------------------------------------------------------------------

class OutputBTC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Bitcoin.OutputBTC) */ {
 public:
  OutputBTC();
  virtual ~OutputBTC();

  OutputBTC(const OutputBTC& from);

  inline OutputBTC& operator=(const OutputBTC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OutputBTC(OutputBTC&& from) noexcept
    : OutputBTC() {
    *this = ::std::move(from);
  }

  inline OutputBTC& operator=(OutputBTC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OutputBTC& default_instance();

  enum OutputCase {
    kStandardOputput = 2,
    kReturn0Output = 3,
    kQrc20Output = 4,
    OUTPUT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputBTC* internal_default_instance() {
    return reinterpret_cast<const OutputBTC*>(
               &_OutputBTC_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(OutputBTC* other);
  friend void swap(OutputBTC& a, OutputBTC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutputBTC* New() const PROTOBUF_FINAL { return New(NULL); }

  OutputBTC* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OutputBTC& from);
  void MergeFrom(const OutputBTC& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OutputBTC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .JUB.Proto.Bitcoin.ENUM_SCRIPT_TYPE_BTC type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::JUB::Proto::Bitcoin::ENUM_SCRIPT_TYPE_BTC type() const;
  void set_type(::JUB::Proto::Bitcoin::ENUM_SCRIPT_TYPE_BTC value);

  // .JUB.Proto.Bitcoin.StandardOutput standardOputput = 2;
  bool has_standardoputput() const;
  void clear_standardoputput();
  static const int kStandardOputputFieldNumber = 2;
  const ::JUB::Proto::Bitcoin::StandardOutput& standardoputput() const;
  ::JUB::Proto::Bitcoin::StandardOutput* release_standardoputput();
  ::JUB::Proto::Bitcoin::StandardOutput* mutable_standardoputput();
  void set_allocated_standardoputput(::JUB::Proto::Bitcoin::StandardOutput* standardoputput);

  // .JUB.Proto.Bitcoin.Return0Output return0Output = 3;
  bool has_return0output() const;
  void clear_return0output();
  static const int kReturn0OutputFieldNumber = 3;
  const ::JUB::Proto::Bitcoin::Return0Output& return0output() const;
  ::JUB::Proto::Bitcoin::Return0Output* release_return0output();
  ::JUB::Proto::Bitcoin::Return0Output* mutable_return0output();
  void set_allocated_return0output(::JUB::Proto::Bitcoin::Return0Output* return0output);

  // .JUB.Proto.Bitcoin.QRC20Output qrc20Output = 4;
  bool has_qrc20output() const;
  void clear_qrc20output();
  static const int kQrc20OutputFieldNumber = 4;
  const ::JUB::Proto::Bitcoin::QRC20Output& qrc20output() const;
  ::JUB::Proto::Bitcoin::QRC20Output* release_qrc20output();
  ::JUB::Proto::Bitcoin::QRC20Output* mutable_qrc20output();
  void set_allocated_qrc20output(::JUB::Proto::Bitcoin::QRC20Output* qrc20output);

  OutputCase output_case() const;
  // @@protoc_insertion_point(class_scope:JUB.Proto.Bitcoin.OutputBTC)
 private:
  void set_has_standardoputput();
  void set_has_return0output();
  void set_has_qrc20output();

  inline bool has_output() const;
  void clear_output();
  inline void clear_has_output();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union OutputUnion {
    OutputUnion() {}
    ::JUB::Proto::Bitcoin::StandardOutput* standardoputput_;
    ::JUB::Proto::Bitcoin::Return0Output* return0output_;
    ::JUB::Proto::Bitcoin::QRC20Output* qrc20output_;
  } output_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_Jub_5fBitcoin_2eproto::TableStruct;
  friend void ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsOutputBTCImpl();
};
// -------------------------------------------------------------------

class TransactionBTC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Bitcoin.TransactionBTC) */ {
 public:
  TransactionBTC();
  virtual ~TransactionBTC();

  TransactionBTC(const TransactionBTC& from);

  inline TransactionBTC& operator=(const TransactionBTC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionBTC(TransactionBTC&& from) noexcept
    : TransactionBTC() {
    *this = ::std::move(from);
  }

  inline TransactionBTC& operator=(TransactionBTC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionBTC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionBTC* internal_default_instance() {
    return reinterpret_cast<const TransactionBTC*>(
               &_TransactionBTC_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TransactionBTC* other);
  friend void swap(TransactionBTC& a, TransactionBTC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionBTC* New() const PROTOBUF_FINAL { return New(NULL); }

  TransactionBTC* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransactionBTC& from);
  void MergeFrom(const TransactionBTC& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransactionBTC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .JUB.Proto.Bitcoin.InputBTC inputs = 3;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 3;
  const ::JUB::Proto::Bitcoin::InputBTC& inputs(int index) const;
  ::JUB::Proto::Bitcoin::InputBTC* mutable_inputs(int index);
  ::JUB::Proto::Bitcoin::InputBTC* add_inputs();
  ::google::protobuf::RepeatedPtrField< ::JUB::Proto::Bitcoin::InputBTC >*
      mutable_inputs();
  const ::google::protobuf::RepeatedPtrField< ::JUB::Proto::Bitcoin::InputBTC >&
      inputs() const;

  // repeated .JUB.Proto.Bitcoin.OutputBTC outputs = 4;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 4;
  const ::JUB::Proto::Bitcoin::OutputBTC& outputs(int index) const;
  ::JUB::Proto::Bitcoin::OutputBTC* mutable_outputs(int index);
  ::JUB::Proto::Bitcoin::OutputBTC* add_outputs();
  ::google::protobuf::RepeatedPtrField< ::JUB::Proto::Bitcoin::OutputBTC >*
      mutable_outputs();
  const ::google::protobuf::RepeatedPtrField< ::JUB::Proto::Bitcoin::OutputBTC >&
      outputs() const;

  // uint32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 locktime = 2;
  void clear_locktime();
  static const int kLocktimeFieldNumber = 2;
  ::google::protobuf::uint32 locktime() const;
  void set_locktime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Bitcoin.TransactionBTC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::JUB::Proto::Bitcoin::InputBTC > inputs_;
  ::google::protobuf::RepeatedPtrField< ::JUB::Proto::Bitcoin::OutputBTC > outputs_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 locktime_;
  mutable int _cached_size_;
  friend struct ::protobuf_Jub_5fBitcoin_2eproto::TableStruct;
  friend void ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsTransactionBTCImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContextCfgBTC

// string main_path = 1;
inline void ContextCfgBTC::clear_main_path() {
  main_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContextCfgBTC::main_path() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.ContextCfgBTC.main_path)
  return main_path_.GetNoArena();
}
inline void ContextCfgBTC::set_main_path(const ::std::string& value) {
  
  main_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.ContextCfgBTC.main_path)
}
#if LANG_CXX11
inline void ContextCfgBTC::set_main_path(::std::string&& value) {
  
  main_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Bitcoin.ContextCfgBTC.main_path)
}
#endif
inline void ContextCfgBTC::set_main_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  main_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Bitcoin.ContextCfgBTC.main_path)
}
inline void ContextCfgBTC::set_main_path(const char* value, size_t size) {
  
  main_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Bitcoin.ContextCfgBTC.main_path)
}
inline ::std::string* ContextCfgBTC::mutable_main_path() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Bitcoin.ContextCfgBTC.main_path)
  return main_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContextCfgBTC::release_main_path() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Bitcoin.ContextCfgBTC.main_path)
  
  return main_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextCfgBTC::set_allocated_main_path(::std::string* main_path) {
  if (main_path != NULL) {
    
  } else {
    
  }
  main_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_path);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Bitcoin.ContextCfgBTC.main_path)
}

// .JUB.Proto.Bitcoin.ENUM_COIN_TYPE_BTC coin_type = 2;
inline void ContextCfgBTC::clear_coin_type() {
  coin_type_ = 0;
}
inline ::JUB::Proto::Bitcoin::ENUM_COIN_TYPE_BTC ContextCfgBTC::coin_type() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.ContextCfgBTC.coin_type)
  return static_cast< ::JUB::Proto::Bitcoin::ENUM_COIN_TYPE_BTC >(coin_type_);
}
inline void ContextCfgBTC::set_coin_type(::JUB::Proto::Bitcoin::ENUM_COIN_TYPE_BTC value) {
  
  coin_type_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.ContextCfgBTC.coin_type)
}

// .JUB.Proto.Bitcoin.ENUM_TRAN_STYPE_BTC trans_type = 3;
inline void ContextCfgBTC::clear_trans_type() {
  trans_type_ = 0;
}
inline ::JUB::Proto::Bitcoin::ENUM_TRAN_STYPE_BTC ContextCfgBTC::trans_type() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.ContextCfgBTC.trans_type)
  return static_cast< ::JUB::Proto::Bitcoin::ENUM_TRAN_STYPE_BTC >(trans_type_);
}
inline void ContextCfgBTC::set_trans_type(::JUB::Proto::Bitcoin::ENUM_TRAN_STYPE_BTC value) {
  
  trans_type_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.ContextCfgBTC.trans_type)
}

// -------------------------------------------------------------------

// InputBTC

// string preHash = 1;
inline void InputBTC::clear_prehash() {
  prehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InputBTC::prehash() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.InputBTC.preHash)
  return prehash_.GetNoArena();
}
inline void InputBTC::set_prehash(const ::std::string& value) {
  
  prehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.InputBTC.preHash)
}
#if LANG_CXX11
inline void InputBTC::set_prehash(::std::string&& value) {
  
  prehash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Bitcoin.InputBTC.preHash)
}
#endif
inline void InputBTC::set_prehash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Bitcoin.InputBTC.preHash)
}
inline void InputBTC::set_prehash(const char* value, size_t size) {
  
  prehash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Bitcoin.InputBTC.preHash)
}
inline ::std::string* InputBTC::mutable_prehash() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Bitcoin.InputBTC.preHash)
  return prehash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InputBTC::release_prehash() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Bitcoin.InputBTC.preHash)
  
  return prehash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InputBTC::set_allocated_prehash(::std::string* prehash) {
  if (prehash != NULL) {
    
  } else {
    
  }
  prehash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prehash);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Bitcoin.InputBTC.preHash)
}

// uint32 preIndex = 2;
inline void InputBTC::clear_preindex() {
  preindex_ = 0u;
}
inline ::google::protobuf::uint32 InputBTC::preindex() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.InputBTC.preIndex)
  return preindex_;
}
inline void InputBTC::set_preindex(::google::protobuf::uint32 value) {
  
  preindex_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.InputBTC.preIndex)
}

// uint64 amount = 3;
inline void InputBTC::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InputBTC::amount() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.InputBTC.amount)
  return amount_;
}
inline void InputBTC::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.InputBTC.amount)
}

// .JUB.Proto.Common.Bip32Path path = 4;
inline bool InputBTC::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
inline const ::JUB::Proto::Common::Bip32Path& InputBTC::path() const {
  const ::JUB::Proto::Common::Bip32Path* p = path_;
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.InputBTC.path)
  return p != NULL ? *p : *reinterpret_cast<const ::JUB::Proto::Common::Bip32Path*>(
      &::JUB::Proto::Common::_Bip32Path_default_instance_);
}
inline ::JUB::Proto::Common::Bip32Path* InputBTC::release_path() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Bitcoin.InputBTC.path)
  
  ::JUB::Proto::Common::Bip32Path* temp = path_;
  path_ = NULL;
  return temp;
}
inline ::JUB::Proto::Common::Bip32Path* InputBTC::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::JUB::Proto::Common::Bip32Path;
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Bitcoin.InputBTC.path)
  return path_;
}
inline void InputBTC::set_allocated_path(::JUB::Proto::Common::Bip32Path* path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(path_);
  }
  if (path) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Bitcoin.InputBTC.path)
}

// -------------------------------------------------------------------

// StandardOutput

// string address = 1;
inline void StandardOutput::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StandardOutput::address() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.StandardOutput.address)
  return address_.GetNoArena();
}
inline void StandardOutput::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.StandardOutput.address)
}
#if LANG_CXX11
inline void StandardOutput::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Bitcoin.StandardOutput.address)
}
#endif
inline void StandardOutput::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Bitcoin.StandardOutput.address)
}
inline void StandardOutput::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Bitcoin.StandardOutput.address)
}
inline ::std::string* StandardOutput::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Bitcoin.StandardOutput.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StandardOutput::release_address() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Bitcoin.StandardOutput.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StandardOutput::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Bitcoin.StandardOutput.address)
}

// uint64 amount = 2;
inline void StandardOutput::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StandardOutput::amount() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.StandardOutput.amount)
  return amount_;
}
inline void StandardOutput::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.StandardOutput.amount)
}

// bool changeAddress = 3;
inline void StandardOutput::clear_changeaddress() {
  changeaddress_ = false;
}
inline bool StandardOutput::changeaddress() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.StandardOutput.changeAddress)
  return changeaddress_;
}
inline void StandardOutput::set_changeaddress(bool value) {
  
  changeaddress_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.StandardOutput.changeAddress)
}

// .JUB.Proto.Common.Bip32Path path = 4;
inline bool StandardOutput::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
inline const ::JUB::Proto::Common::Bip32Path& StandardOutput::path() const {
  const ::JUB::Proto::Common::Bip32Path* p = path_;
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.StandardOutput.path)
  return p != NULL ? *p : *reinterpret_cast<const ::JUB::Proto::Common::Bip32Path*>(
      &::JUB::Proto::Common::_Bip32Path_default_instance_);
}
inline ::JUB::Proto::Common::Bip32Path* StandardOutput::release_path() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Bitcoin.StandardOutput.path)
  
  ::JUB::Proto::Common::Bip32Path* temp = path_;
  path_ = NULL;
  return temp;
}
inline ::JUB::Proto::Common::Bip32Path* StandardOutput::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::JUB::Proto::Common::Bip32Path;
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Bitcoin.StandardOutput.path)
  return path_;
}
inline void StandardOutput::set_allocated_path(::JUB::Proto::Common::Bip32Path* path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(path_);
  }
  if (path) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Bitcoin.StandardOutput.path)
}

// -------------------------------------------------------------------

// Return0Output

// uint64 amount = 1;
inline void Return0Output::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Return0Output::amount() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.Return0Output.amount)
  return amount_;
}
inline void Return0Output::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.Return0Output.amount)
}

// string data = 2;
inline void Return0Output::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Return0Output::data() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.Return0Output.data)
  return data_.GetNoArena();
}
inline void Return0Output::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.Return0Output.data)
}
#if LANG_CXX11
inline void Return0Output::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Bitcoin.Return0Output.data)
}
#endif
inline void Return0Output::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Bitcoin.Return0Output.data)
}
inline void Return0Output::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Bitcoin.Return0Output.data)
}
inline ::std::string* Return0Output::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Bitcoin.Return0Output.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Return0Output::release_data() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Bitcoin.Return0Output.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Return0Output::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Bitcoin.Return0Output.data)
}

// -------------------------------------------------------------------

// QRC20Output

// string data = 1;
inline void QRC20Output::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QRC20Output::data() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.QRC20Output.data)
  return data_.GetNoArena();
}
inline void QRC20Output::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.QRC20Output.data)
}
#if LANG_CXX11
inline void QRC20Output::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Bitcoin.QRC20Output.data)
}
#endif
inline void QRC20Output::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Bitcoin.QRC20Output.data)
}
inline void QRC20Output::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Bitcoin.QRC20Output.data)
}
inline ::std::string* QRC20Output::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Bitcoin.QRC20Output.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QRC20Output::release_data() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Bitcoin.QRC20Output.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QRC20Output::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Bitcoin.QRC20Output.data)
}

// -------------------------------------------------------------------

// OutputBTC

// .JUB.Proto.Bitcoin.ENUM_SCRIPT_TYPE_BTC type = 1;
inline void OutputBTC::clear_type() {
  type_ = 0;
}
inline ::JUB::Proto::Bitcoin::ENUM_SCRIPT_TYPE_BTC OutputBTC::type() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.OutputBTC.type)
  return static_cast< ::JUB::Proto::Bitcoin::ENUM_SCRIPT_TYPE_BTC >(type_);
}
inline void OutputBTC::set_type(::JUB::Proto::Bitcoin::ENUM_SCRIPT_TYPE_BTC value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.OutputBTC.type)
}

// .JUB.Proto.Bitcoin.StandardOutput standardOputput = 2;
inline bool OutputBTC::has_standardoputput() const {
  return output_case() == kStandardOputput;
}
inline void OutputBTC::set_has_standardoputput() {
  _oneof_case_[0] = kStandardOputput;
}
inline void OutputBTC::clear_standardoputput() {
  if (has_standardoputput()) {
    delete output_.standardoputput_;
    clear_has_output();
  }
}
inline ::JUB::Proto::Bitcoin::StandardOutput* OutputBTC::release_standardoputput() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Bitcoin.OutputBTC.standardOputput)
  if (has_standardoputput()) {
    clear_has_output();
      ::JUB::Proto::Bitcoin::StandardOutput* temp = output_.standardoputput_;
    output_.standardoputput_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::JUB::Proto::Bitcoin::StandardOutput& OutputBTC::standardoputput() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.OutputBTC.standardOputput)
  return has_standardoputput()
      ? *output_.standardoputput_
      : *reinterpret_cast< ::JUB::Proto::Bitcoin::StandardOutput*>(&::JUB::Proto::Bitcoin::_StandardOutput_default_instance_);
}
inline ::JUB::Proto::Bitcoin::StandardOutput* OutputBTC::mutable_standardoputput() {
  if (!has_standardoputput()) {
    clear_output();
    set_has_standardoputput();
    output_.standardoputput_ = new ::JUB::Proto::Bitcoin::StandardOutput;
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Bitcoin.OutputBTC.standardOputput)
  return output_.standardoputput_;
}

// .JUB.Proto.Bitcoin.Return0Output return0Output = 3;
inline bool OutputBTC::has_return0output() const {
  return output_case() == kReturn0Output;
}
inline void OutputBTC::set_has_return0output() {
  _oneof_case_[0] = kReturn0Output;
}
inline void OutputBTC::clear_return0output() {
  if (has_return0output()) {
    delete output_.return0output_;
    clear_has_output();
  }
}
inline ::JUB::Proto::Bitcoin::Return0Output* OutputBTC::release_return0output() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Bitcoin.OutputBTC.return0Output)
  if (has_return0output()) {
    clear_has_output();
      ::JUB::Proto::Bitcoin::Return0Output* temp = output_.return0output_;
    output_.return0output_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::JUB::Proto::Bitcoin::Return0Output& OutputBTC::return0output() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.OutputBTC.return0Output)
  return has_return0output()
      ? *output_.return0output_
      : *reinterpret_cast< ::JUB::Proto::Bitcoin::Return0Output*>(&::JUB::Proto::Bitcoin::_Return0Output_default_instance_);
}
inline ::JUB::Proto::Bitcoin::Return0Output* OutputBTC::mutable_return0output() {
  if (!has_return0output()) {
    clear_output();
    set_has_return0output();
    output_.return0output_ = new ::JUB::Proto::Bitcoin::Return0Output;
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Bitcoin.OutputBTC.return0Output)
  return output_.return0output_;
}

// .JUB.Proto.Bitcoin.QRC20Output qrc20Output = 4;
inline bool OutputBTC::has_qrc20output() const {
  return output_case() == kQrc20Output;
}
inline void OutputBTC::set_has_qrc20output() {
  _oneof_case_[0] = kQrc20Output;
}
inline void OutputBTC::clear_qrc20output() {
  if (has_qrc20output()) {
    delete output_.qrc20output_;
    clear_has_output();
  }
}
inline ::JUB::Proto::Bitcoin::QRC20Output* OutputBTC::release_qrc20output() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Bitcoin.OutputBTC.qrc20Output)
  if (has_qrc20output()) {
    clear_has_output();
      ::JUB::Proto::Bitcoin::QRC20Output* temp = output_.qrc20output_;
    output_.qrc20output_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::JUB::Proto::Bitcoin::QRC20Output& OutputBTC::qrc20output() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.OutputBTC.qrc20Output)
  return has_qrc20output()
      ? *output_.qrc20output_
      : *reinterpret_cast< ::JUB::Proto::Bitcoin::QRC20Output*>(&::JUB::Proto::Bitcoin::_QRC20Output_default_instance_);
}
inline ::JUB::Proto::Bitcoin::QRC20Output* OutputBTC::mutable_qrc20output() {
  if (!has_qrc20output()) {
    clear_output();
    set_has_qrc20output();
    output_.qrc20output_ = new ::JUB::Proto::Bitcoin::QRC20Output;
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Bitcoin.OutputBTC.qrc20Output)
  return output_.qrc20output_;
}

inline bool OutputBTC::has_output() const {
  return output_case() != OUTPUT_NOT_SET;
}
inline void OutputBTC::clear_has_output() {
  _oneof_case_[0] = OUTPUT_NOT_SET;
}
inline OutputBTC::OutputCase OutputBTC::output_case() const {
  return OutputBTC::OutputCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransactionBTC

// uint32 version = 1;
inline void TransactionBTC::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 TransactionBTC::version() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.TransactionBTC.version)
  return version_;
}
inline void TransactionBTC::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.TransactionBTC.version)
}

// uint32 locktime = 2;
inline void TransactionBTC::clear_locktime() {
  locktime_ = 0u;
}
inline ::google::protobuf::uint32 TransactionBTC::locktime() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.TransactionBTC.locktime)
  return locktime_;
}
inline void TransactionBTC::set_locktime(::google::protobuf::uint32 value) {
  
  locktime_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Bitcoin.TransactionBTC.locktime)
}

// repeated .JUB.Proto.Bitcoin.InputBTC inputs = 3;
inline int TransactionBTC::inputs_size() const {
  return inputs_.size();
}
inline void TransactionBTC::clear_inputs() {
  inputs_.Clear();
}
inline const ::JUB::Proto::Bitcoin::InputBTC& TransactionBTC::inputs(int index) const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.TransactionBTC.inputs)
  return inputs_.Get(index);
}
inline ::JUB::Proto::Bitcoin::InputBTC* TransactionBTC::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Bitcoin.TransactionBTC.inputs)
  return inputs_.Mutable(index);
}
inline ::JUB::Proto::Bitcoin::InputBTC* TransactionBTC::add_inputs() {
  // @@protoc_insertion_point(field_add:JUB.Proto.Bitcoin.TransactionBTC.inputs)
  return inputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::JUB::Proto::Bitcoin::InputBTC >*
TransactionBTC::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:JUB.Proto.Bitcoin.TransactionBTC.inputs)
  return &inputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::JUB::Proto::Bitcoin::InputBTC >&
TransactionBTC::inputs() const {
  // @@protoc_insertion_point(field_list:JUB.Proto.Bitcoin.TransactionBTC.inputs)
  return inputs_;
}

// repeated .JUB.Proto.Bitcoin.OutputBTC outputs = 4;
inline int TransactionBTC::outputs_size() const {
  return outputs_.size();
}
inline void TransactionBTC::clear_outputs() {
  outputs_.Clear();
}
inline const ::JUB::Proto::Bitcoin::OutputBTC& TransactionBTC::outputs(int index) const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Bitcoin.TransactionBTC.outputs)
  return outputs_.Get(index);
}
inline ::JUB::Proto::Bitcoin::OutputBTC* TransactionBTC::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Bitcoin.TransactionBTC.outputs)
  return outputs_.Mutable(index);
}
inline ::JUB::Proto::Bitcoin::OutputBTC* TransactionBTC::add_outputs() {
  // @@protoc_insertion_point(field_add:JUB.Proto.Bitcoin.TransactionBTC.outputs)
  return outputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::JUB::Proto::Bitcoin::OutputBTC >*
TransactionBTC::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:JUB.Proto.Bitcoin.TransactionBTC.outputs)
  return &outputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::JUB::Proto::Bitcoin::OutputBTC >&
TransactionBTC::outputs() const {
  // @@protoc_insertion_point(field_list:JUB.Proto.Bitcoin.TransactionBTC.outputs)
  return outputs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Bitcoin
}  // namespace Proto
}  // namespace JUB

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::JUB::Proto::Bitcoin::ENUM_COIN_TYPE_BTC> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Bitcoin::ENUM_COIN_TYPE_BTC>() {
  return ::JUB::Proto::Bitcoin::ENUM_COIN_TYPE_BTC_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Bitcoin::ENUM_TRAN_STYPE_BTC> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Bitcoin::ENUM_TRAN_STYPE_BTC>() {
  return ::JUB::Proto::Bitcoin::ENUM_TRAN_STYPE_BTC_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Bitcoin::ENUM_SCRIPT_TYPE_BTC> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Bitcoin::ENUM_SCRIPT_TYPE_BTC>() {
  return ::JUB::Proto::Bitcoin::ENUM_SCRIPT_TYPE_BTC_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Jub_5fBitcoin_2eproto__INCLUDED
