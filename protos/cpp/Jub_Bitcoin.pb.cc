// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_Bitcoin.proto

#include "Jub_Bitcoin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace JUB {
namespace Proto {
namespace Bitcoin {
class ContextCfgBTCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContextCfgBTC>
      _instance;
} _ContextCfgBTC_default_instance_;
class InputBTCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InputBTC>
      _instance;
} _InputBTC_default_instance_;
class StandardOutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StandardOutput>
      _instance;
} _StandardOutput_default_instance_;
class Return0OutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Return0Output>
      _instance;
} _Return0Output_default_instance_;
class QRC20OutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QRC20Output>
      _instance;
} _QRC20Output_default_instance_;
class OutputBTCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OutputBTC>
      _instance;
  const ::JUB::Proto::Bitcoin::StandardOutput* standardoputput_;
  const ::JUB::Proto::Bitcoin::Return0Output* return0output_;
  const ::JUB::Proto::Bitcoin::QRC20Output* qrc20output_;
} _OutputBTC_default_instance_;
class TransactionBTCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransactionBTC>
      _instance;
} _TransactionBTC_default_instance_;
}  // namespace Bitcoin
}  // namespace Proto
}  // namespace JUB
namespace protobuf_Jub_5fBitcoin_2eproto {
void InitDefaultsContextCfgBTCImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::JUB::Proto::Bitcoin::_ContextCfgBTC_default_instance_;
    new (ptr) ::JUB::Proto::Bitcoin::ContextCfgBTC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::Bitcoin::ContextCfgBTC::InitAsDefaultInstance();
}

void InitDefaultsContextCfgBTC() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsContextCfgBTCImpl);
}

void InitDefaultsInputBTCImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Jub_5fCommon_2eproto::InitDefaultsBip32Path();
  {
    void* ptr = &::JUB::Proto::Bitcoin::_InputBTC_default_instance_;
    new (ptr) ::JUB::Proto::Bitcoin::InputBTC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::Bitcoin::InputBTC::InitAsDefaultInstance();
}

void InitDefaultsInputBTC() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInputBTCImpl);
}

void InitDefaultsStandardOutputImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Jub_5fCommon_2eproto::InitDefaultsBip32Path();
  {
    void* ptr = &::JUB::Proto::Bitcoin::_StandardOutput_default_instance_;
    new (ptr) ::JUB::Proto::Bitcoin::StandardOutput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::Bitcoin::StandardOutput::InitAsDefaultInstance();
}

void InitDefaultsStandardOutput() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStandardOutputImpl);
}

void InitDefaultsReturn0OutputImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::JUB::Proto::Bitcoin::_Return0Output_default_instance_;
    new (ptr) ::JUB::Proto::Bitcoin::Return0Output();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::Bitcoin::Return0Output::InitAsDefaultInstance();
}

void InitDefaultsReturn0Output() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReturn0OutputImpl);
}

void InitDefaultsQRC20OutputImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::JUB::Proto::Bitcoin::_QRC20Output_default_instance_;
    new (ptr) ::JUB::Proto::Bitcoin::QRC20Output();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::Bitcoin::QRC20Output::InitAsDefaultInstance();
}

void InitDefaultsQRC20Output() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQRC20OutputImpl);
}

void InitDefaultsOutputBTCImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Jub_5fBitcoin_2eproto::InitDefaultsStandardOutput();
  protobuf_Jub_5fBitcoin_2eproto::InitDefaultsReturn0Output();
  protobuf_Jub_5fBitcoin_2eproto::InitDefaultsQRC20Output();
  {
    void* ptr = &::JUB::Proto::Bitcoin::_OutputBTC_default_instance_;
    new (ptr) ::JUB::Proto::Bitcoin::OutputBTC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::Bitcoin::OutputBTC::InitAsDefaultInstance();
}

void InitDefaultsOutputBTC() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOutputBTCImpl);
}

void InitDefaultsTransactionBTCImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Jub_5fBitcoin_2eproto::InitDefaultsInputBTC();
  protobuf_Jub_5fBitcoin_2eproto::InitDefaultsOutputBTC();
  {
    void* ptr = &::JUB::Proto::Bitcoin::_TransactionBTC_default_instance_;
    new (ptr) ::JUB::Proto::Bitcoin::TransactionBTC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::Bitcoin::TransactionBTC::InitAsDefaultInstance();
}

void InitDefaultsTransactionBTC() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTransactionBTCImpl);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::ContextCfgBTC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::ContextCfgBTC, main_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::ContextCfgBTC, coin_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::ContextCfgBTC, trans_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::InputBTC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::InputBTC, prehash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::InputBTC, preindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::InputBTC, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::InputBTC, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::StandardOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::StandardOutput, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::StandardOutput, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::StandardOutput, changeaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::StandardOutput, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::Return0Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::Return0Output, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::Return0Output, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::QRC20Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::QRC20Output, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::OutputBTC, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::OutputBTC, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::OutputBTC, type_),
  offsetof(::JUB::Proto::Bitcoin::OutputBTCDefaultTypeInternal, standardoputput_),
  offsetof(::JUB::Proto::Bitcoin::OutputBTCDefaultTypeInternal, return0output_),
  offsetof(::JUB::Proto::Bitcoin::OutputBTCDefaultTypeInternal, qrc20output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::OutputBTC, output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::TransactionBTC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::TransactionBTC, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::TransactionBTC, locktime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::TransactionBTC, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::JUB::Proto::Bitcoin::TransactionBTC, outputs_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::JUB::Proto::Bitcoin::ContextCfgBTC)},
  { 8, -1, sizeof(::JUB::Proto::Bitcoin::InputBTC)},
  { 17, -1, sizeof(::JUB::Proto::Bitcoin::StandardOutput)},
  { 26, -1, sizeof(::JUB::Proto::Bitcoin::Return0Output)},
  { 33, -1, sizeof(::JUB::Proto::Bitcoin::QRC20Output)},
  { 39, -1, sizeof(::JUB::Proto::Bitcoin::OutputBTC)},
  { 49, -1, sizeof(::JUB::Proto::Bitcoin::TransactionBTC)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::JUB::Proto::Bitcoin::_ContextCfgBTC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::JUB::Proto::Bitcoin::_InputBTC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::JUB::Proto::Bitcoin::_StandardOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::JUB::Proto::Bitcoin::_Return0Output_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::JUB::Proto::Bitcoin::_QRC20Output_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::JUB::Proto::Bitcoin::_OutputBTC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::JUB::Proto::Bitcoin::_TransactionBTC_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Jub_Bitcoin.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021Jub_Bitcoin.proto\022\021JUB.Proto.Bitcoin\032\020"
      "Jub_Common.proto\"\230\001\n\rContextCfgBTC\022\021\n\tma"
      "in_path\030\001 \001(\t\0228\n\tcoin_type\030\002 \001(\0162%.JUB.P"
      "roto.Bitcoin.ENUM_COIN_TYPE_BTC\022:\n\ntrans"
      "_type\030\003 \001(\0162&.JUB.Proto.Bitcoin.ENUM_TRA"
      "N_STYPE_BTC\"h\n\010InputBTC\022\017\n\007preHash\030\001 \001(\t"
      "\022\020\n\010preIndex\030\002 \001(\r\022\016\n\006amount\030\003 \001(\004\022)\n\004pa"
      "th\030\004 \001(\0132\033.JUB.Proto.Common.Bip32Path\"s\n"
      "\016StandardOutput\022\017\n\007address\030\001 \001(\t\022\016\n\006amou"
      "nt\030\002 \001(\004\022\025\n\rchangeAddress\030\003 \001(\010\022)\n\004path\030"
      "\004 \001(\0132\033.JUB.Proto.Common.Bip32Path\"-\n\rRe"
      "turn0Output\022\016\n\006amount\030\001 \001(\004\022\014\n\004data\030\002 \001("
      "\t\"\033\n\013QRC20Output\022\014\n\004data\030\001 \001(\t\"\374\001\n\tOutpu"
      "tBTC\0225\n\004type\030\001 \001(\0162\'.JUB.Proto.Bitcoin.E"
      "NUM_SCRIPT_TYPE_BTC\022<\n\017standardOputput\030\002"
      " \001(\0132!.JUB.Proto.Bitcoin.StandardOutputH"
      "\000\0229\n\rreturn0Output\030\003 \001(\0132 .JUB.Proto.Bit"
      "coin.Return0OutputH\000\0225\n\013qrc20Output\030\004 \001("
      "\0132\036.JUB.Proto.Bitcoin.QRC20OutputH\000B\010\n\006o"
      "utput\"\217\001\n\016TransactionBTC\022\017\n\007version\030\001 \001("
      "\r\022\020\n\010locktime\030\002 \001(\r\022+\n\006inputs\030\003 \003(\0132\033.JU"
      "B.Proto.Bitcoin.InputBTC\022-\n\007outputs\030\004 \003("
      "\0132\034.JUB.Proto.Bitcoin.OutputBTC*e\n\022ENUM_"
      "COIN_TYPE_BTC\022\013\n\007COINBTC\020\000\022\013\n\007COINBCH\020\001\022"
      "\013\n\007COINLTC\020\002\022\014\n\010COINUSDT\020\003\022\014\n\010COINDASH\020\004"
      "\022\014\n\010COINQTUM\020\005*N\n\023ENUM_TRAN_STYPE_BTC\022\t\n"
      "\005p2pkh\020\000\022\017\n\013p2sh_p2wpkh\020\001\022\021\n\rp2sh_multis"
      "ig\020\002\022\010\n\004p2pk\020\003*<\n\024ENUM_SCRIPT_TYPE_BTC\022\014"
      "\n\010STANDARD\020\000\022\013\n\007RETURN0\020\001\022\t\n\005QRC20\020\003B6\n\025"
      "com.jubiter.jni.protoB\rBitcoinProtos\242\002\rB"
      "itcoinProtosb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Jub_Bitcoin.proto", &protobuf_RegisterTypes);
  ::protobuf_Jub_5fCommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Jub_5fBitcoin_2eproto
namespace JUB {
namespace Proto {
namespace Bitcoin {
const ::google::protobuf::EnumDescriptor* ENUM_COIN_TYPE_BTC_descriptor() {
  protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Jub_5fBitcoin_2eproto::file_level_enum_descriptors[0];
}
bool ENUM_COIN_TYPE_BTC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ENUM_TRAN_STYPE_BTC_descriptor() {
  protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Jub_5fBitcoin_2eproto::file_level_enum_descriptors[1];
}
bool ENUM_TRAN_STYPE_BTC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ENUM_SCRIPT_TYPE_BTC_descriptor() {
  protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Jub_5fBitcoin_2eproto::file_level_enum_descriptors[2];
}
bool ENUM_SCRIPT_TYPE_BTC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ContextCfgBTC::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContextCfgBTC::kMainPathFieldNumber;
const int ContextCfgBTC::kCoinTypeFieldNumber;
const int ContextCfgBTC::kTransTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContextCfgBTC::ContextCfgBTC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsContextCfgBTC();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.Bitcoin.ContextCfgBTC)
}
ContextCfgBTC::ContextCfgBTC(const ContextCfgBTC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  main_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.main_path().size() > 0) {
    main_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_path_);
  }
  ::memcpy(&coin_type_, &from.coin_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&trans_type_) -
    reinterpret_cast<char*>(&coin_type_)) + sizeof(trans_type_));
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.Bitcoin.ContextCfgBTC)
}

void ContextCfgBTC::SharedCtor() {
  main_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&coin_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trans_type_) -
      reinterpret_cast<char*>(&coin_type_)) + sizeof(trans_type_));
  _cached_size_ = 0;
}

ContextCfgBTC::~ContextCfgBTC() {
  // @@protoc_insertion_point(destructor:JUB.Proto.Bitcoin.ContextCfgBTC)
  SharedDtor();
}

void ContextCfgBTC::SharedDtor() {
  main_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContextCfgBTC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContextCfgBTC::descriptor() {
  ::protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContextCfgBTC& ContextCfgBTC::default_instance() {
  ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsContextCfgBTC();
  return *internal_default_instance();
}

ContextCfgBTC* ContextCfgBTC::New(::google::protobuf::Arena* arena) const {
  ContextCfgBTC* n = new ContextCfgBTC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContextCfgBTC::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.Bitcoin.ContextCfgBTC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  main_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&coin_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trans_type_) -
      reinterpret_cast<char*>(&coin_type_)) + sizeof(trans_type_));
  _internal_metadata_.Clear();
}

bool ContextCfgBTC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.Bitcoin.ContextCfgBTC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string main_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_main_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->main_path().data(), static_cast<int>(this->main_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "JUB.Proto.Bitcoin.ContextCfgBTC.main_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Bitcoin.ENUM_COIN_TYPE_BTC coin_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coin_type(static_cast< ::JUB::Proto::Bitcoin::ENUM_COIN_TYPE_BTC >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Bitcoin.ENUM_TRAN_STYPE_BTC trans_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trans_type(static_cast< ::JUB::Proto::Bitcoin::ENUM_TRAN_STYPE_BTC >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.Bitcoin.ContextCfgBTC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.Bitcoin.ContextCfgBTC)
  return false;
#undef DO_
}

void ContextCfgBTC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.Bitcoin.ContextCfgBTC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string main_path = 1;
  if (this->main_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->main_path().data(), static_cast<int>(this->main_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Bitcoin.ContextCfgBTC.main_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->main_path(), output);
  }

  // .JUB.Proto.Bitcoin.ENUM_COIN_TYPE_BTC coin_type = 2;
  if (this->coin_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->coin_type(), output);
  }

  // .JUB.Proto.Bitcoin.ENUM_TRAN_STYPE_BTC trans_type = 3;
  if (this->trans_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->trans_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.Bitcoin.ContextCfgBTC)
}

::google::protobuf::uint8* ContextCfgBTC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.Bitcoin.ContextCfgBTC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string main_path = 1;
  if (this->main_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->main_path().data(), static_cast<int>(this->main_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Bitcoin.ContextCfgBTC.main_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->main_path(), target);
  }

  // .JUB.Proto.Bitcoin.ENUM_COIN_TYPE_BTC coin_type = 2;
  if (this->coin_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->coin_type(), target);
  }

  // .JUB.Proto.Bitcoin.ENUM_TRAN_STYPE_BTC trans_type = 3;
  if (this->trans_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->trans_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.Bitcoin.ContextCfgBTC)
  return target;
}

size_t ContextCfgBTC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.Bitcoin.ContextCfgBTC)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string main_path = 1;
  if (this->main_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->main_path());
  }

  // .JUB.Proto.Bitcoin.ENUM_COIN_TYPE_BTC coin_type = 2;
  if (this->coin_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coin_type());
  }

  // .JUB.Proto.Bitcoin.ENUM_TRAN_STYPE_BTC trans_type = 3;
  if (this->trans_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContextCfgBTC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.Bitcoin.ContextCfgBTC)
  GOOGLE_DCHECK_NE(&from, this);
  const ContextCfgBTC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContextCfgBTC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.Bitcoin.ContextCfgBTC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.Bitcoin.ContextCfgBTC)
    MergeFrom(*source);
  }
}

void ContextCfgBTC::MergeFrom(const ContextCfgBTC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.Bitcoin.ContextCfgBTC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.main_path().size() > 0) {

    main_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_path_);
  }
  if (from.coin_type() != 0) {
    set_coin_type(from.coin_type());
  }
  if (from.trans_type() != 0) {
    set_trans_type(from.trans_type());
  }
}

void ContextCfgBTC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.Bitcoin.ContextCfgBTC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContextCfgBTC::CopyFrom(const ContextCfgBTC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.Bitcoin.ContextCfgBTC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextCfgBTC::IsInitialized() const {
  return true;
}

void ContextCfgBTC::Swap(ContextCfgBTC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContextCfgBTC::InternalSwap(ContextCfgBTC* other) {
  using std::swap;
  main_path_.Swap(&other->main_path_);
  swap(coin_type_, other->coin_type_);
  swap(trans_type_, other->trans_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContextCfgBTC::GetMetadata() const {
  protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InputBTC::InitAsDefaultInstance() {
  ::JUB::Proto::Bitcoin::_InputBTC_default_instance_._instance.get_mutable()->path_ = const_cast< ::JUB::Proto::Common::Bip32Path*>(
      ::JUB::Proto::Common::Bip32Path::internal_default_instance());
}
void InputBTC::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputBTC::kPreHashFieldNumber;
const int InputBTC::kPreIndexFieldNumber;
const int InputBTC::kAmountFieldNumber;
const int InputBTC::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputBTC::InputBTC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsInputBTC();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.Bitcoin.InputBTC)
}
InputBTC::InputBTC(const InputBTC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prehash().size() > 0) {
    prehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prehash_);
  }
  if (from.has_path()) {
    path_ = new ::JUB::Proto::Common::Bip32Path(*from.path_);
  } else {
    path_ = NULL;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&preindex_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(preindex_));
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.Bitcoin.InputBTC)
}

void InputBTC::SharedCtor() {
  prehash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preindex_) -
      reinterpret_cast<char*>(&path_)) + sizeof(preindex_));
  _cached_size_ = 0;
}

InputBTC::~InputBTC() {
  // @@protoc_insertion_point(destructor:JUB.Proto.Bitcoin.InputBTC)
  SharedDtor();
}

void InputBTC::SharedDtor() {
  prehash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
}

void InputBTC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputBTC::descriptor() {
  ::protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputBTC& InputBTC::default_instance() {
  ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsInputBTC();
  return *internal_default_instance();
}

InputBTC* InputBTC::New(::google::protobuf::Arena* arena) const {
  InputBTC* n = new InputBTC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputBTC::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.Bitcoin.InputBTC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prehash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preindex_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(preindex_));
  _internal_metadata_.Clear();
}

bool InputBTC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.Bitcoin.InputBTC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string preHash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prehash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prehash().data(), static_cast<int>(this->prehash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "JUB.Proto.Bitcoin.InputBTC.preHash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 preIndex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 amount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Common.Bip32Path path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.Bitcoin.InputBTC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.Bitcoin.InputBTC)
  return false;
#undef DO_
}

void InputBTC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.Bitcoin.InputBTC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string preHash = 1;
  if (this->prehash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prehash().data(), static_cast<int>(this->prehash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Bitcoin.InputBTC.preHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prehash(), output);
  }

  // uint32 preIndex = 2;
  if (this->preindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->preindex(), output);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }

  // .JUB.Proto.Common.Bip32Path path = 4;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->path_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.Bitcoin.InputBTC)
}

::google::protobuf::uint8* InputBTC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.Bitcoin.InputBTC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string preHash = 1;
  if (this->prehash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prehash().data(), static_cast<int>(this->prehash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Bitcoin.InputBTC.preHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prehash(), target);
  }

  // uint32 preIndex = 2;
  if (this->preindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->preindex(), target);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }

  // .JUB.Proto.Common.Bip32Path path = 4;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->path_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.Bitcoin.InputBTC)
  return target;
}

size_t InputBTC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.Bitcoin.InputBTC)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string preHash = 1;
  if (this->prehash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prehash());
  }

  // .JUB.Proto.Common.Bip32Path path = 4;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->path_);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  // uint32 preIndex = 2;
  if (this->preindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputBTC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.Bitcoin.InputBTC)
  GOOGLE_DCHECK_NE(&from, this);
  const InputBTC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputBTC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.Bitcoin.InputBTC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.Bitcoin.InputBTC)
    MergeFrom(*source);
  }
}

void InputBTC::MergeFrom(const InputBTC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.Bitcoin.InputBTC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prehash().size() > 0) {

    prehash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prehash_);
  }
  if (from.has_path()) {
    mutable_path()->::JUB::Proto::Common::Bip32Path::MergeFrom(from.path());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.preindex() != 0) {
    set_preindex(from.preindex());
  }
}

void InputBTC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.Bitcoin.InputBTC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputBTC::CopyFrom(const InputBTC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.Bitcoin.InputBTC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputBTC::IsInitialized() const {
  return true;
}

void InputBTC::Swap(InputBTC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputBTC::InternalSwap(InputBTC* other) {
  using std::swap;
  prehash_.Swap(&other->prehash_);
  swap(path_, other->path_);
  swap(amount_, other->amount_);
  swap(preindex_, other->preindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputBTC::GetMetadata() const {
  protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StandardOutput::InitAsDefaultInstance() {
  ::JUB::Proto::Bitcoin::_StandardOutput_default_instance_._instance.get_mutable()->path_ = const_cast< ::JUB::Proto::Common::Bip32Path*>(
      ::JUB::Proto::Common::Bip32Path::internal_default_instance());
}
void StandardOutput::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StandardOutput::kAddressFieldNumber;
const int StandardOutput::kAmountFieldNumber;
const int StandardOutput::kChangeAddressFieldNumber;
const int StandardOutput::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StandardOutput::StandardOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsStandardOutput();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.Bitcoin.StandardOutput)
}
StandardOutput::StandardOutput(const StandardOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_path()) {
    path_ = new ::JUB::Proto::Common::Bip32Path(*from.path_);
  } else {
    path_ = NULL;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&changeaddress_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(changeaddress_));
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.Bitcoin.StandardOutput)
}

void StandardOutput::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changeaddress_) -
      reinterpret_cast<char*>(&path_)) + sizeof(changeaddress_));
  _cached_size_ = 0;
}

StandardOutput::~StandardOutput() {
  // @@protoc_insertion_point(destructor:JUB.Proto.Bitcoin.StandardOutput)
  SharedDtor();
}

void StandardOutput::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
}

void StandardOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StandardOutput::descriptor() {
  ::protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StandardOutput& StandardOutput::default_instance() {
  ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsStandardOutput();
  return *internal_default_instance();
}

StandardOutput* StandardOutput::New(::google::protobuf::Arena* arena) const {
  StandardOutput* n = new StandardOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StandardOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.Bitcoin.StandardOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changeaddress_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(changeaddress_));
  _internal_metadata_.Clear();
}

bool StandardOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.Bitcoin.StandardOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "JUB.Proto.Bitcoin.StandardOutput.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool changeAddress = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changeaddress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Common.Bip32Path path = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.Bitcoin.StandardOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.Bitcoin.StandardOutput)
  return false;
#undef DO_
}

void StandardOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.Bitcoin.StandardOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Bitcoin.StandardOutput.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // uint64 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // bool changeAddress = 3;
  if (this->changeaddress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->changeaddress(), output);
  }

  // .JUB.Proto.Common.Bip32Path path = 4;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->path_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.Bitcoin.StandardOutput)
}

::google::protobuf::uint8* StandardOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.Bitcoin.StandardOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Bitcoin.StandardOutput.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // uint64 amount = 2;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  // bool changeAddress = 3;
  if (this->changeaddress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->changeaddress(), target);
  }

  // .JUB.Proto.Common.Bip32Path path = 4;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->path_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.Bitcoin.StandardOutput)
  return target;
}

size_t StandardOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.Bitcoin.StandardOutput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // .JUB.Proto.Common.Bip32Path path = 4;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->path_);
  }

  // uint64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  // bool changeAddress = 3;
  if (this->changeaddress() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StandardOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.Bitcoin.StandardOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const StandardOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StandardOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.Bitcoin.StandardOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.Bitcoin.StandardOutput)
    MergeFrom(*source);
  }
}

void StandardOutput::MergeFrom(const StandardOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.Bitcoin.StandardOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_path()) {
    mutable_path()->::JUB::Proto::Common::Bip32Path::MergeFrom(from.path());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.changeaddress() != 0) {
    set_changeaddress(from.changeaddress());
  }
}

void StandardOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.Bitcoin.StandardOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StandardOutput::CopyFrom(const StandardOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.Bitcoin.StandardOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandardOutput::IsInitialized() const {
  return true;
}

void StandardOutput::Swap(StandardOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StandardOutput::InternalSwap(StandardOutput* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(path_, other->path_);
  swap(amount_, other->amount_);
  swap(changeaddress_, other->changeaddress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StandardOutput::GetMetadata() const {
  protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Return0Output::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Return0Output::kAmountFieldNumber;
const int Return0Output::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Return0Output::Return0Output()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsReturn0Output();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.Bitcoin.Return0Output)
}
Return0Output::Return0Output(const Return0Output& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.Bitcoin.Return0Output)
}

void Return0Output::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Return0Output::~Return0Output() {
  // @@protoc_insertion_point(destructor:JUB.Proto.Bitcoin.Return0Output)
  SharedDtor();
}

void Return0Output::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Return0Output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Return0Output::descriptor() {
  ::protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Return0Output& Return0Output::default_instance() {
  ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsReturn0Output();
  return *internal_default_instance();
}

Return0Output* Return0Output::New(::google::protobuf::Arena* arena) const {
  Return0Output* n = new Return0Output;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Return0Output::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.Bitcoin.Return0Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Return0Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.Bitcoin.Return0Output)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "JUB.Proto.Bitcoin.Return0Output.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.Bitcoin.Return0Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.Bitcoin.Return0Output)
  return false;
#undef DO_
}

void Return0Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.Bitcoin.Return0Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Bitcoin.Return0Output.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.Bitcoin.Return0Output)
}

::google::protobuf::uint8* Return0Output::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.Bitcoin.Return0Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Bitcoin.Return0Output.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.Bitcoin.Return0Output)
  return target;
}

size_t Return0Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.Bitcoin.Return0Output)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // uint64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Return0Output::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.Bitcoin.Return0Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Return0Output* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Return0Output>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.Bitcoin.Return0Output)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.Bitcoin.Return0Output)
    MergeFrom(*source);
  }
}

void Return0Output::MergeFrom(const Return0Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.Bitcoin.Return0Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void Return0Output::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.Bitcoin.Return0Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Return0Output::CopyFrom(const Return0Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.Bitcoin.Return0Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Return0Output::IsInitialized() const {
  return true;
}

void Return0Output::Swap(Return0Output* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Return0Output::InternalSwap(Return0Output* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(amount_, other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Return0Output::GetMetadata() const {
  protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QRC20Output::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QRC20Output::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QRC20Output::QRC20Output()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsQRC20Output();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.Bitcoin.QRC20Output)
}
QRC20Output::QRC20Output(const QRC20Output& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.Bitcoin.QRC20Output)
}

void QRC20Output::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

QRC20Output::~QRC20Output() {
  // @@protoc_insertion_point(destructor:JUB.Proto.Bitcoin.QRC20Output)
  SharedDtor();
}

void QRC20Output::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QRC20Output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QRC20Output::descriptor() {
  ::protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QRC20Output& QRC20Output::default_instance() {
  ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsQRC20Output();
  return *internal_default_instance();
}

QRC20Output* QRC20Output::New(::google::protobuf::Arena* arena) const {
  QRC20Output* n = new QRC20Output;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QRC20Output::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.Bitcoin.QRC20Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool QRC20Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.Bitcoin.QRC20Output)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "JUB.Proto.Bitcoin.QRC20Output.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.Bitcoin.QRC20Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.Bitcoin.QRC20Output)
  return false;
#undef DO_
}

void QRC20Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.Bitcoin.QRC20Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Bitcoin.QRC20Output.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.Bitcoin.QRC20Output)
}

::google::protobuf::uint8* QRC20Output::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.Bitcoin.QRC20Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Bitcoin.QRC20Output.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.Bitcoin.QRC20Output)
  return target;
}

size_t QRC20Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.Bitcoin.QRC20Output)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QRC20Output::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.Bitcoin.QRC20Output)
  GOOGLE_DCHECK_NE(&from, this);
  const QRC20Output* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QRC20Output>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.Bitcoin.QRC20Output)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.Bitcoin.QRC20Output)
    MergeFrom(*source);
  }
}

void QRC20Output::MergeFrom(const QRC20Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.Bitcoin.QRC20Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void QRC20Output::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.Bitcoin.QRC20Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QRC20Output::CopyFrom(const QRC20Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.Bitcoin.QRC20Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QRC20Output::IsInitialized() const {
  return true;
}

void QRC20Output::Swap(QRC20Output* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QRC20Output::InternalSwap(QRC20Output* other) {
  using std::swap;
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QRC20Output::GetMetadata() const {
  protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OutputBTC::InitAsDefaultInstance() {
  ::JUB::Proto::Bitcoin::_OutputBTC_default_instance_.standardoputput_ = const_cast< ::JUB::Proto::Bitcoin::StandardOutput*>(
      ::JUB::Proto::Bitcoin::StandardOutput::internal_default_instance());
  ::JUB::Proto::Bitcoin::_OutputBTC_default_instance_.return0output_ = const_cast< ::JUB::Proto::Bitcoin::Return0Output*>(
      ::JUB::Proto::Bitcoin::Return0Output::internal_default_instance());
  ::JUB::Proto::Bitcoin::_OutputBTC_default_instance_.qrc20output_ = const_cast< ::JUB::Proto::Bitcoin::QRC20Output*>(
      ::JUB::Proto::Bitcoin::QRC20Output::internal_default_instance());
}
void OutputBTC::set_allocated_standardoputput(::JUB::Proto::Bitcoin::StandardOutput* standardoputput) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output();
  if (standardoputput) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      standardoputput = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, standardoputput, submessage_arena);
    }
    set_has_standardoputput();
    output_.standardoputput_ = standardoputput;
  }
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Bitcoin.OutputBTC.standardOputput)
}
void OutputBTC::set_allocated_return0output(::JUB::Proto::Bitcoin::Return0Output* return0output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output();
  if (return0output) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      return0output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, return0output, submessage_arena);
    }
    set_has_return0output();
    output_.return0output_ = return0output;
  }
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Bitcoin.OutputBTC.return0Output)
}
void OutputBTC::set_allocated_qrc20output(::JUB::Proto::Bitcoin::QRC20Output* qrc20output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output();
  if (qrc20output) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      qrc20output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, qrc20output, submessage_arena);
    }
    set_has_qrc20output();
    output_.qrc20output_ = qrc20output;
  }
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Bitcoin.OutputBTC.qrc20Output)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutputBTC::kTypeFieldNumber;
const int OutputBTC::kStandardOputputFieldNumber;
const int OutputBTC::kReturn0OutputFieldNumber;
const int OutputBTC::kQrc20OutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutputBTC::OutputBTC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsOutputBTC();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.Bitcoin.OutputBTC)
}
OutputBTC::OutputBTC(const OutputBTC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_output();
  switch (from.output_case()) {
    case kStandardOputput: {
      mutable_standardoputput()->::JUB::Proto::Bitcoin::StandardOutput::MergeFrom(from.standardoputput());
      break;
    }
    case kReturn0Output: {
      mutable_return0output()->::JUB::Proto::Bitcoin::Return0Output::MergeFrom(from.return0output());
      break;
    }
    case kQrc20Output: {
      mutable_qrc20output()->::JUB::Proto::Bitcoin::QRC20Output::MergeFrom(from.qrc20output());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.Bitcoin.OutputBTC)
}

void OutputBTC::SharedCtor() {
  type_ = 0;
  clear_has_output();
  _cached_size_ = 0;
}

OutputBTC::~OutputBTC() {
  // @@protoc_insertion_point(destructor:JUB.Proto.Bitcoin.OutputBTC)
  SharedDtor();
}

void OutputBTC::SharedDtor() {
  if (has_output()) {
    clear_output();
  }
}

void OutputBTC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutputBTC::descriptor() {
  ::protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OutputBTC& OutputBTC::default_instance() {
  ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsOutputBTC();
  return *internal_default_instance();
}

OutputBTC* OutputBTC::New(::google::protobuf::Arena* arena) const {
  OutputBTC* n = new OutputBTC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OutputBTC::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:JUB.Proto.Bitcoin.OutputBTC)
  switch (output_case()) {
    case kStandardOputput: {
      delete output_.standardoputput_;
      break;
    }
    case kReturn0Output: {
      delete output_.return0output_;
      break;
    }
    case kQrc20Output: {
      delete output_.qrc20output_;
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_NOT_SET;
}


void OutputBTC::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.Bitcoin.OutputBTC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_output();
  _internal_metadata_.Clear();
}

bool OutputBTC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.Bitcoin.OutputBTC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .JUB.Proto.Bitcoin.ENUM_SCRIPT_TYPE_BTC type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::JUB::Proto::Bitcoin::ENUM_SCRIPT_TYPE_BTC >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Bitcoin.StandardOutput standardOputput = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_standardoputput()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Bitcoin.Return0Output return0Output = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_return0output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Bitcoin.QRC20Output qrc20Output = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_qrc20output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.Bitcoin.OutputBTC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.Bitcoin.OutputBTC)
  return false;
#undef DO_
}

void OutputBTC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.Bitcoin.OutputBTC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JUB.Proto.Bitcoin.ENUM_SCRIPT_TYPE_BTC type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .JUB.Proto.Bitcoin.StandardOutput standardOputput = 2;
  if (has_standardoputput()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *output_.standardoputput_, output);
  }

  // .JUB.Proto.Bitcoin.Return0Output return0Output = 3;
  if (has_return0output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *output_.return0output_, output);
  }

  // .JUB.Proto.Bitcoin.QRC20Output qrc20Output = 4;
  if (has_qrc20output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *output_.qrc20output_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.Bitcoin.OutputBTC)
}

::google::protobuf::uint8* OutputBTC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.Bitcoin.OutputBTC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JUB.Proto.Bitcoin.ENUM_SCRIPT_TYPE_BTC type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .JUB.Proto.Bitcoin.StandardOutput standardOputput = 2;
  if (has_standardoputput()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *output_.standardoputput_, deterministic, target);
  }

  // .JUB.Proto.Bitcoin.Return0Output return0Output = 3;
  if (has_return0output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *output_.return0output_, deterministic, target);
  }

  // .JUB.Proto.Bitcoin.QRC20Output qrc20Output = 4;
  if (has_qrc20output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *output_.qrc20output_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.Bitcoin.OutputBTC)
  return target;
}

size_t OutputBTC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.Bitcoin.OutputBTC)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .JUB.Proto.Bitcoin.ENUM_SCRIPT_TYPE_BTC type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (output_case()) {
    // .JUB.Proto.Bitcoin.StandardOutput standardOputput = 2;
    case kStandardOputput: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_.standardoputput_);
      break;
    }
    // .JUB.Proto.Bitcoin.Return0Output return0Output = 3;
    case kReturn0Output: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_.return0output_);
      break;
    }
    // .JUB.Proto.Bitcoin.QRC20Output qrc20Output = 4;
    case kQrc20Output: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_.qrc20output_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutputBTC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.Bitcoin.OutputBTC)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputBTC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OutputBTC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.Bitcoin.OutputBTC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.Bitcoin.OutputBTC)
    MergeFrom(*source);
  }
}

void OutputBTC::MergeFrom(const OutputBTC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.Bitcoin.OutputBTC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.output_case()) {
    case kStandardOputput: {
      mutable_standardoputput()->::JUB::Proto::Bitcoin::StandardOutput::MergeFrom(from.standardoputput());
      break;
    }
    case kReturn0Output: {
      mutable_return0output()->::JUB::Proto::Bitcoin::Return0Output::MergeFrom(from.return0output());
      break;
    }
    case kQrc20Output: {
      mutable_qrc20output()->::JUB::Proto::Bitcoin::QRC20Output::MergeFrom(from.qrc20output());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
}

void OutputBTC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.Bitcoin.OutputBTC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputBTC::CopyFrom(const OutputBTC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.Bitcoin.OutputBTC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputBTC::IsInitialized() const {
  return true;
}

void OutputBTC::Swap(OutputBTC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutputBTC::InternalSwap(OutputBTC* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(output_, other->output_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OutputBTC::GetMetadata() const {
  protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransactionBTC::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionBTC::kVersionFieldNumber;
const int TransactionBTC::kLocktimeFieldNumber;
const int TransactionBTC::kInputsFieldNumber;
const int TransactionBTC::kOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionBTC::TransactionBTC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsTransactionBTC();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.Bitcoin.TransactionBTC)
}
TransactionBTC::TransactionBTC(const TransactionBTC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      inputs_(from.inputs_),
      outputs_(from.outputs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&locktime_) -
    reinterpret_cast<char*>(&version_)) + sizeof(locktime_));
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.Bitcoin.TransactionBTC)
}

void TransactionBTC::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locktime_) -
      reinterpret_cast<char*>(&version_)) + sizeof(locktime_));
  _cached_size_ = 0;
}

TransactionBTC::~TransactionBTC() {
  // @@protoc_insertion_point(destructor:JUB.Proto.Bitcoin.TransactionBTC)
  SharedDtor();
}

void TransactionBTC::SharedDtor() {
}

void TransactionBTC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionBTC::descriptor() {
  ::protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionBTC& TransactionBTC::default_instance() {
  ::protobuf_Jub_5fBitcoin_2eproto::InitDefaultsTransactionBTC();
  return *internal_default_instance();
}

TransactionBTC* TransactionBTC::New(::google::protobuf::Arena* arena) const {
  TransactionBTC* n = new TransactionBTC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionBTC::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.Bitcoin.TransactionBTC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locktime_) -
      reinterpret_cast<char*>(&version_)) + sizeof(locktime_));
  _internal_metadata_.Clear();
}

bool TransactionBTC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.Bitcoin.TransactionBTC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 locktime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locktime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .JUB.Proto.Bitcoin.InputBTC inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .JUB.Proto.Bitcoin.OutputBTC outputs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.Bitcoin.TransactionBTC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.Bitcoin.TransactionBTC)
  return false;
#undef DO_
}

void TransactionBTC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.Bitcoin.TransactionBTC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // uint32 locktime = 2;
  if (this->locktime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->locktime(), output);
  }

  // repeated .JUB.Proto.Bitcoin.InputBTC inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inputs(static_cast<int>(i)), output);
  }

  // repeated .JUB.Proto.Bitcoin.OutputBTC outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->outputs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.Bitcoin.TransactionBTC)
}

::google::protobuf::uint8* TransactionBTC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.Bitcoin.TransactionBTC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // uint32 locktime = 2;
  if (this->locktime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->locktime(), target);
  }

  // repeated .JUB.Proto.Bitcoin.InputBTC inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->inputs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .JUB.Proto.Bitcoin.OutputBTC outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->outputs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.Bitcoin.TransactionBTC)
  return target;
}

size_t TransactionBTC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.Bitcoin.TransactionBTC)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .JUB.Proto.Bitcoin.InputBTC inputs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated .JUB.Proto.Bitcoin.OutputBTC outputs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // uint32 locktime = 2;
  if (this->locktime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->locktime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionBTC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.Bitcoin.TransactionBTC)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionBTC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionBTC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.Bitcoin.TransactionBTC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.Bitcoin.TransactionBTC)
    MergeFrom(*source);
  }
}

void TransactionBTC::MergeFrom(const TransactionBTC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.Bitcoin.TransactionBTC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.locktime() != 0) {
    set_locktime(from.locktime());
  }
}

void TransactionBTC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.Bitcoin.TransactionBTC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionBTC::CopyFrom(const TransactionBTC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.Bitcoin.TransactionBTC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionBTC::IsInitialized() const {
  return true;
}

void TransactionBTC::Swap(TransactionBTC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionBTC::InternalSwap(TransactionBTC* other) {
  using std::swap;
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  swap(version_, other->version_);
  swap(locktime_, other->locktime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionBTC::GetMetadata() const {
  protobuf_Jub_5fBitcoin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Jub_5fBitcoin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Bitcoin
}  // namespace Proto
}  // namespace JUB

// @@protoc_insertion_point(global_scope)
