name: release on tag
on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  createRelease:
    runs-on: ubuntu-latest
    outputs:
      assetURL: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body_path: ./releaselogs/${{github.ref}}.md
  
  build:
    needs: [createRelease]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-2019]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: module
        run: |
          git submodule update --init --recursive

      - name: Set cygwin cache
        if: runner.os == 'Windows'
        uses: actions/cache@v1
        with:
          path: C:\Users\runneradmin\AppData\Local\Temp\chocolatey
          key: ${{ runner.os }}-chocolatey-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-chocolatey-${{ matrix.os }}-
            ${{ runner.os }}-chocolatey-

      - name: Install cygwin base packages with chocolatey
        if: runner.os == 'Windows'
        run: |
          choco config get cacheLocation
          choco install --no-progress -y cygwin
          choco install --no-progress -y zip

      - name: Install cygwin additional packages
        if: runner.os == 'Windows'
        run: |
          C:\tools\cygwin\cygwinsetup.exe -qgnNdO -R C:/tools/cygwin -s http://mirrors.kernel.org/sourceware/cygwin/ -P autoconf,bison,gcc-core,gcc-g++,git,libcrypt-devel,libedit-devel,libffi-devel,libgdbm-devel,libgmp-devel,libintl-devel,libncurses-devel,libreadline-devel,libssl-devel,libuuid-devel,make,patch,ruby,tcl-tk-devel,zlib-devel,libhidapi-devel,cmake
        shell: cmd


      - name: Build linux
        if: runner.os == 'Linux'
        run: |
          sudo apt install libhidapi-dev
          cmake .
          make install

      - name: Build osx
        if: runner.os == 'macOS'
        run: |
          brew install hidapi
          cmake .
          make install

      - name: Build cygwin
        if: runner.os == 'Windows'
        run: |
          path C:\tools\cygwin\bin;C:\tools\cygwin\usr\bin
          bash.exe -c "cmake . && make install"
        shell: cmd

      - name: Zip project # This would actually build your project, using zip for an example artifact
        run: |
          zip -r JubSDK-${{runner.os}}.zip install

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.createRelease.outputs.assetURL}} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./JubSDK-${{runner.os}}.zip
          asset_name: JubSDK-${{runner.os}}.zip
          asset_content_type: application/zip
